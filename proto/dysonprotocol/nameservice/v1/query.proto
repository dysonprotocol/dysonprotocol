syntax = "proto3";
package dysonprotocol.nameservice.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "dysonprotocol/nameservice/v1/nameservice.proto";
import "dysonprotocol/nameservice/v1/params.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/tendermint/v1beta1/query.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/nft/v1beta1/nft.proto";

option go_package = "dysonprotocol.com/x/nameservice/types";

// Query defines the gRPC querier service.
service Query {

  // ComputeHash computes the hash for a name, salt, and committer address
  rpc ComputeHash(ComputeHashRequest) returns (ComputeHashResponse) {
    option (google.api.http).get = "/dysonprotocol/nameservice/v1/compute_hash";
  }

  // Params queries the nameservice module parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dysonprotocol/nameservice/v1/params";
  }
}

// ComputeHashRequest is a request to compute the hash for a name and salt
message ComputeHashRequest {
  // name is the name to compute the hash for
  string name = 1;
  // salt is the salt to use for the hash computation
  string salt = 2;
  // committer is the committer address
  string committer = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// ComputeHashResponse contains the computed hash as a hex string
message ComputeHashResponse {
  // hex_hash is the computed hash as a hex string
  string hex_hash = 1;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}