syntax = "proto3";

package dysonprotocol.storage.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

import "dysonprotocol/storage/v1/storage.proto";

option go_package = "dysonprotocol.com/x/storage/types";

service Query {
  // Gets the stored data for the given owner and index.
  rpc StorageGet(QueryStorageGetRequest) returns (QueryStorageGetResponse) {
    option (google.api.http) = {
      get : "/dysonprotocol/storage/v1/storage_get"
    };
  }

  // Lists all storage entries for the owner under a given index prefix.
  // If index_only=true, only keys are returned (values may be empty); supports
  // pagination.
  rpc StorageList(QueryStorageListRequest) returns (QueryStorageListResponse) {
    option (google.api.http) = {
      get : "/dysonprotocol/storage/v1/storage_list"
    };
  }
}

message QueryStorageGetRequest {
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string index = 2;
}

message QueryStorageGetResponse { Storage entry = 1; }

message QueryStorageListRequest {
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string index_prefix = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

message QueryStorageListResponse {
  repeated Storage entries = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
