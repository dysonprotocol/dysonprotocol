// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dysonprotocol/storage/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgStorageSet is the message for setting a storage entry.
type MsgStorageSet struct {
	// The owner of the storage entry to set.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The index of the storage entry to set.
	Index string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	// The data to set for the storage entry.
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgStorageSet) Reset()         { *m = MsgStorageSet{} }
func (m *MsgStorageSet) String() string { return proto.CompactTextString(m) }
func (*MsgStorageSet) ProtoMessage()    {}
func (*MsgStorageSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe2368d460e32dd8, []int{0}
}
func (m *MsgStorageSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStorageSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStorageSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStorageSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStorageSet.Merge(m, src)
}
func (m *MsgStorageSet) XXX_Size() int {
	return m.Size()
}
func (m *MsgStorageSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStorageSet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStorageSet proto.InternalMessageInfo

func (m *MsgStorageSet) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgStorageSet) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgStorageSet) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// MsgStorageSetResponse is the response for setting a storage entry.
type MsgStorageSetResponse struct {
}

func (m *MsgStorageSetResponse) Reset()         { *m = MsgStorageSetResponse{} }
func (m *MsgStorageSetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStorageSetResponse) ProtoMessage()    {}
func (*MsgStorageSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe2368d460e32dd8, []int{1}
}
func (m *MsgStorageSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStorageSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStorageSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStorageSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStorageSetResponse.Merge(m, src)
}
func (m *MsgStorageSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStorageSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStorageSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStorageSetResponse proto.InternalMessageInfo

// MsgStorageDelete is the message for deleting storage entries.
type MsgStorageDelete struct {
	// The owner of the storage entries to delete.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// List of indexes to delete
	Indexes []string `protobuf:"bytes,2,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (m *MsgStorageDelete) Reset()         { *m = MsgStorageDelete{} }
func (m *MsgStorageDelete) String() string { return proto.CompactTextString(m) }
func (*MsgStorageDelete) ProtoMessage()    {}
func (*MsgStorageDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe2368d460e32dd8, []int{2}
}
func (m *MsgStorageDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStorageDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStorageDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStorageDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStorageDelete.Merge(m, src)
}
func (m *MsgStorageDelete) XXX_Size() int {
	return m.Size()
}
func (m *MsgStorageDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStorageDelete.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStorageDelete proto.InternalMessageInfo

func (m *MsgStorageDelete) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgStorageDelete) GetIndexes() []string {
	if m != nil {
		return m.Indexes
	}
	return nil
}

// MsgStorageDeleteResponse is the response for deleting storage entries.
type MsgStorageDeleteResponse struct {
	// List of indexes that were successfully deleted
	DeletedIndexes []string `protobuf:"bytes,1,rep,name=deleted_indexes,json=deletedIndexes,proto3" json:"deleted_indexes,omitempty"`
}

func (m *MsgStorageDeleteResponse) Reset()         { *m = MsgStorageDeleteResponse{} }
func (m *MsgStorageDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStorageDeleteResponse) ProtoMessage()    {}
func (*MsgStorageDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe2368d460e32dd8, []int{3}
}
func (m *MsgStorageDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStorageDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStorageDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStorageDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStorageDeleteResponse.Merge(m, src)
}
func (m *MsgStorageDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStorageDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStorageDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStorageDeleteResponse proto.InternalMessageInfo

func (m *MsgStorageDeleteResponse) GetDeletedIndexes() []string {
	if m != nil {
		return m.DeletedIndexes
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgStorageSet)(nil), "dysonprotocol.storage.v1.MsgStorageSet")
	proto.RegisterType((*MsgStorageSetResponse)(nil), "dysonprotocol.storage.v1.MsgStorageSetResponse")
	proto.RegisterType((*MsgStorageDelete)(nil), "dysonprotocol.storage.v1.MsgStorageDelete")
	proto.RegisterType((*MsgStorageDeleteResponse)(nil), "dysonprotocol.storage.v1.MsgStorageDeleteResponse")
}

func init() { proto.RegisterFile("dysonprotocol/storage/v1/tx.proto", fileDescriptor_fe2368d460e32dd8) }

var fileDescriptor_fe2368d460e32dd8 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x65, 0xe0, 0xf1, 0x5e, 0xb8, 0x09, 0xef, 0x3d, 0x1b, 0x0c, 0x63, 0x17, 0x0d, 0xb2, 0x81,
	0x90, 0xd8, 0x09, 0xb8, 0xd3, 0x95, 0xe8, 0xc6, 0x05, 0x9b, 0xb2, 0x73, 0x43, 0x2a, 0x33, 0x8e,
	0x24, 0xb4, 0x43, 0x3a, 0x23, 0xc2, 0xce, 0xf8, 0x05, 0x7e, 0x0a, 0x0b, 0x3f, 0xc2, 0x25, 0x71,
	0xe5, 0xd2, 0x40, 0x0c, 0xbf, 0x61, 0x98, 0x69, 0xd1, 0x9a, 0x98, 0xe0, 0xa6, 0x99, 0x7b, 0xce,
	0xe9, 0x39, 0xa7, 0xd3, 0x0b, 0xfb, 0x74, 0x2a, 0x45, 0x38, 0x8a, 0x84, 0x12, 0x7d, 0x31, 0x24,
	0x52, 0x89, 0xc8, 0xe7, 0x8c, 0x8c, 0x9b, 0x44, 0x4d, 0x5c, 0x0d, 0x5b, 0x38, 0x25, 0x71, 0x63,
	0x89, 0x3b, 0x6e, 0xda, 0x25, 0x2e, 0xb8, 0xd0, 0x04, 0x59, 0x9f, 0x8c, 0xde, 0xde, 0xeb, 0x0b,
	0x19, 0x08, 0xd9, 0x33, 0x84, 0x19, 0x62, 0xaa, 0x6c, 0x26, 0x12, 0x48, 0xbe, 0x8e, 0x08, 0x24,
	0x8f, 0x89, 0x1d, 0x3f, 0x18, 0x84, 0x82, 0xe8, 0xa7, 0x81, 0xaa, 0x37, 0x50, 0xec, 0x48, 0xde,
	0x35, 0x69, 0x5d, 0xa6, 0x2c, 0x17, 0xf2, 0xe2, 0x36, 0x64, 0x11, 0x46, 0x15, 0x54, 0x2f, 0xb4,
	0xf1, 0xf3, 0xe3, 0x41, 0x29, 0x76, 0x3f, 0xa1, 0x34, 0x62, 0x52, 0x76, 0x55, 0x34, 0x08, 0xb9,
	0x67, 0x64, 0x56, 0x09, 0xf2, 0x83, 0x90, 0xb2, 0x09, 0xce, 0xae, 0xf5, 0x9e, 0x19, 0x2c, 0x0b,
	0x7e, 0x51, 0x5f, 0xf9, 0x38, 0xa7, 0x41, 0x7d, 0x3e, 0x82, 0xfb, 0xd5, 0xac, 0x61, 0xde, 0xaa,
	0x96, 0x61, 0x37, 0x15, 0xeb, 0x31, 0x39, 0x12, 0xa1, 0x64, 0xd5, 0x6b, 0xf8, 0xff, 0x41, 0x9c,
	0xb1, 0x21, 0x53, 0xec, 0xc7, 0x95, 0x30, 0xfc, 0xd1, 0x2d, 0x98, 0xc4, 0xd9, 0x4a, 0xae, 0x5e,
	0xf0, 0x92, 0x31, 0x55, 0xe1, 0x14, 0xf0, 0xd7, 0xa4, 0xa4, 0x85, 0x55, 0x83, 0x7f, 0x54, 0x23,
	0xb4, 0x97, 0x38, 0x21, 0xed, 0xf4, 0x37, 0x86, 0xcf, 0x0d, 0xda, 0x7a, 0x43, 0x90, 0xeb, 0x48,
	0x6e, 0x5d, 0x01, 0x7c, 0xba, 0xc3, 0x9a, 0xfb, 0xdd, 0xcf, 0x74, 0x53, 0x5f, 0x6d, 0x93, 0x2d,
	0x85, 0x9b, 0x62, 0x02, 0x8a, 0xe9, 0xbb, 0x69, 0x6c, 0xe3, 0x60, 0xb4, 0x76, 0x6b, 0x7b, 0x6d,
	0x12, 0x68, 0xe7, 0xef, 0x56, 0xb3, 0x06, 0x6a, 0x1f, 0x3f, 0x2d, 0x1c, 0x34, 0x5f, 0x38, 0xe8,
	0x75, 0xe1, 0xa0, 0x87, 0xa5, 0x93, 0x99, 0x2f, 0x9d, 0xcc, 0xcb, 0xd2, 0xc9, 0x5c, 0xa4, 0x57,
	0xdb, 0xed, 0x8b, 0x80, 0x4c, 0x36, 0x0b, 0xae, 0xa6, 0x23, 0x26, 0x2f, 0x7f, 0x6b, 0xf6, 0xf0,
	0x3d, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x05, 0xe7, 0x48, 0x06, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Sets a storage entry. Only the owner can set.
	StorageSet(ctx context.Context, in *MsgStorageSet, opts ...grpc.CallOption) (*MsgStorageSetResponse, error)
	// Deletes storage entries. Only the owner can delete.
	StorageDelete(ctx context.Context, in *MsgStorageDelete, opts ...grpc.CallOption) (*MsgStorageDeleteResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) StorageSet(ctx context.Context, in *MsgStorageSet, opts ...grpc.CallOption) (*MsgStorageSetResponse, error) {
	out := new(MsgStorageSetResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.storage.v1.Msg/StorageSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StorageDelete(ctx context.Context, in *MsgStorageDelete, opts ...grpc.CallOption) (*MsgStorageDeleteResponse, error) {
	out := new(MsgStorageDeleteResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.storage.v1.Msg/StorageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Sets a storage entry. Only the owner can set.
	StorageSet(context.Context, *MsgStorageSet) (*MsgStorageSetResponse, error)
	// Deletes storage entries. Only the owner can delete.
	StorageDelete(context.Context, *MsgStorageDelete) (*MsgStorageDeleteResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) StorageSet(ctx context.Context, req *MsgStorageSet) (*MsgStorageSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageSet not implemented")
}
func (*UnimplementedMsgServer) StorageDelete(ctx context.Context, req *MsgStorageDelete) (*MsgStorageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDelete not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_StorageSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStorageSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StorageSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.storage.v1.Msg/StorageSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StorageSet(ctx, req.(*MsgStorageSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StorageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStorageDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StorageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.storage.v1.Msg/StorageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StorageDelete(ctx, req.(*MsgStorageDelete))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dysonprotocol.storage.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorageSet",
			Handler:    _Msg_StorageSet_Handler,
		},
		{
			MethodName: "StorageDelete",
			Handler:    _Msg_StorageDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dysonprotocol/storage/v1/tx.proto",
}

func (m *MsgStorageSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStorageSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStorageSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStorageSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStorageSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStorageSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStorageDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStorageDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStorageDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexes[iNdEx])
			copy(dAtA[i:], m.Indexes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Indexes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStorageDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStorageDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStorageDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedIndexes) > 0 {
		for iNdEx := len(m.DeletedIndexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeletedIndexes[iNdEx])
			copy(dAtA[i:], m.DeletedIndexes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DeletedIndexes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgStorageSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStorageSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStorageDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Indexes) > 0 {
		for _, s := range m.Indexes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgStorageDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeletedIndexes) > 0 {
		for _, s := range m.DeletedIndexes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgStorageSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStorageSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStorageSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStorageSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStorageSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStorageSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStorageDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStorageDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStorageDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStorageDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStorageDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStorageDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedIndexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedIndexes = append(m.DeletedIndexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
