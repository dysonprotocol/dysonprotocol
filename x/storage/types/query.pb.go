// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dysonprotocol/storage/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryStorageGetRequest struct {
	// The address of the owner of the storage entry.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The index of the storage entry.
	Index string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	// The gjson path to extract from the storage entry.
	Extract string `protobuf:"bytes,3,opt,name=extract,proto3" json:"extract,omitempty"`
}

func (m *QueryStorageGetRequest) Reset()         { *m = QueryStorageGetRequest{} }
func (m *QueryStorageGetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStorageGetRequest) ProtoMessage()    {}
func (*QueryStorageGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad09eeace4391645, []int{0}
}
func (m *QueryStorageGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageGetRequest.Merge(m, src)
}
func (m *QueryStorageGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageGetRequest proto.InternalMessageInfo

func (m *QueryStorageGetRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryStorageGetRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *QueryStorageGetRequest) GetExtract() string {
	if m != nil {
		return m.Extract
	}
	return ""
}

type QueryStorageGetResponse struct {
	Entry *Storage `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *QueryStorageGetResponse) Reset()         { *m = QueryStorageGetResponse{} }
func (m *QueryStorageGetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStorageGetResponse) ProtoMessage()    {}
func (*QueryStorageGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad09eeace4391645, []int{1}
}
func (m *QueryStorageGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageGetResponse.Merge(m, src)
}
func (m *QueryStorageGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageGetResponse proto.InternalMessageInfo

func (m *QueryStorageGetResponse) GetEntry() *Storage {
	if m != nil {
		return m.Entry
	}
	return nil
}

type QueryStorageListRequest struct {
	// The address of the owner of the storage entry.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The index prefix of the storage entry to filter by.
	IndexPrefix string `protobuf:"bytes,2,opt,name=index_prefix,json=indexPrefix,proto3" json:"index_prefix,omitempty"`
	// The optional gjson filter to filter the storage entry. For example, Given
	// data like {"user": {"age": 18}}, the filter "user.age > 18" will return
	// true.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// The optional gjson path to extract from the storage entry. For example,
	// Given data like {"user": {"name": "jeff"}}, the extract "user.name" will
	// return "jeff".
	Extract string `protobuf:"bytes,4,opt,name=extract,proto3" json:"extract,omitempty"`
	// The pagination request.
	Pagination *query.PageRequest `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStorageListRequest) Reset()         { *m = QueryStorageListRequest{} }
func (m *QueryStorageListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStorageListRequest) ProtoMessage()    {}
func (*QueryStorageListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad09eeace4391645, []int{2}
}
func (m *QueryStorageListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageListRequest.Merge(m, src)
}
func (m *QueryStorageListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageListRequest proto.InternalMessageInfo

func (m *QueryStorageListRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryStorageListRequest) GetIndexPrefix() string {
	if m != nil {
		return m.IndexPrefix
	}
	return ""
}

func (m *QueryStorageListRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *QueryStorageListRequest) GetExtract() string {
	if m != nil {
		return m.Extract
	}
	return ""
}

func (m *QueryStorageListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStorageListResponse struct {
	Entries    []*Storage          `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStorageListResponse) Reset()         { *m = QueryStorageListResponse{} }
func (m *QueryStorageListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStorageListResponse) ProtoMessage()    {}
func (*QueryStorageListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad09eeace4391645, []int{3}
}
func (m *QueryStorageListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageListResponse.Merge(m, src)
}
func (m *QueryStorageListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageListResponse proto.InternalMessageInfo

func (m *QueryStorageListResponse) GetEntries() []*Storage {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *QueryStorageListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryStorageGetRequest)(nil), "dysonprotocol.storage.v1.QueryStorageGetRequest")
	proto.RegisterType((*QueryStorageGetResponse)(nil), "dysonprotocol.storage.v1.QueryStorageGetResponse")
	proto.RegisterType((*QueryStorageListRequest)(nil), "dysonprotocol.storage.v1.QueryStorageListRequest")
	proto.RegisterType((*QueryStorageListResponse)(nil), "dysonprotocol.storage.v1.QueryStorageListResponse")
}

func init() {
	proto.RegisterFile("dysonprotocol/storage/v1/query.proto", fileDescriptor_ad09eeace4391645)
}

var fileDescriptor_ad09eeace4391645 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x8d, 0x53, 0xd2, 0x0a, 0x87, 0x0b, 0x56, 0x54, 0x96, 0x08, 0xad, 0x9a, 0x08, 0xd2, 0x0a,
	0xa9, 0x36, 0x1b, 0x0e, 0x1c, 0x7a, 0xa2, 0x07, 0x7a, 0xe1, 0x50, 0xb6, 0x37, 0x2e, 0xd1, 0x26,
	0x99, 0xae, 0x2c, 0x25, 0xf6, 0xd6, 0x76, 0x43, 0x72, 0xe5, 0x0b, 0x90, 0xf8, 0x81, 0x1e, 0xf8,
	0x04, 0x3e, 0x82, 0x63, 0x81, 0x0b, 0x47, 0x94, 0x20, 0xbe, 0x03, 0xad, 0xed, 0xd0, 0x5d, 0x95,
	0x28, 0x2d, 0x97, 0xd5, 0xce, 0xcc, 0x1b, 0xbf, 0xf7, 0xc6, 0x63, 0xfc, 0x78, 0x38, 0xd3, 0x52,
	0x64, 0x4a, 0x1a, 0x39, 0x90, 0x23, 0xa6, 0x8d, 0x54, 0x49, 0x0a, 0x6c, 0x12, 0xb1, 0xb3, 0x73,
	0x50, 0x33, 0x6a, 0x2b, 0x24, 0x28, 0xa1, 0xa8, 0x47, 0xd1, 0x49, 0xd4, 0x6c, 0xa4, 0x32, 0x95,
	0xb6, 0xc0, 0xf2, 0x3f, 0x87, 0x6f, 0x3e, 0x4a, 0xa5, 0x4c, 0x47, 0xc0, 0x92, 0x8c, 0xb3, 0x44,
	0x08, 0x69, 0x12, 0xc3, 0xa5, 0xd0, 0xbe, 0xfa, 0x74, 0x20, 0xf5, 0x58, 0x6a, 0xd6, 0x4f, 0x34,
	0x38, 0x1a, 0x36, 0x89, 0xfa, 0x60, 0x92, 0x88, 0x65, 0x49, 0xca, 0x85, 0x05, 0x7b, 0xec, 0x43,
	0x87, 0xed, 0x39, 0x0a, 0x17, 0xf8, 0xd2, 0xfd, 0x64, 0xcc, 0x85, 0x64, 0xf6, 0xeb, 0x53, 0x9d,
	0x95, 0x6e, 0x96, 0x92, 0x6d, 0xad, 0x3d, 0xc5, 0xdb, 0x6f, 0x72, 0xde, 0x13, 0x97, 0x3d, 0x02,
	0x13, 0xc3, 0xd9, 0x39, 0x68, 0x43, 0x28, 0xae, 0xc9, 0x77, 0x02, 0x54, 0x80, 0x76, 0xd0, 0xde,
	0xdd, 0xc3, 0xe0, 0xdb, 0xe7, 0xfd, 0x86, 0x67, 0x7d, 0x39, 0x1c, 0x2a, 0xd0, 0xfa, 0xc4, 0x28,
	0x2e, 0xd2, 0xd8, 0xc1, 0x48, 0x03, 0xd7, 0xb8, 0x18, 0xc2, 0x34, 0xa8, 0xe6, 0xf8, 0xd8, 0x05,
	0x24, 0xc0, 0x5b, 0x30, 0x35, 0x2a, 0x19, 0x98, 0x60, 0xc3, 0xe6, 0x97, 0x61, 0x3b, 0xc6, 0x0f,
	0xae, 0x31, 0xeb, 0x4c, 0x0a, 0x0d, 0xe4, 0x05, 0xae, 0x81, 0x30, 0x6a, 0x66, 0xa9, 0xeb, 0xdd,
	0x16, 0x5d, 0x35, 0x74, 0xea, 0x9b, 0x63, 0x87, 0x6f, 0xff, 0x46, 0xe5, 0x43, 0x5f, 0x73, 0xfd,
	0xdf, 0x7e, 0x5a, 0xf8, 0x9e, 0xb5, 0xd0, 0xcb, 0x14, 0x9c, 0xf2, 0xa5, 0xad, 0xba, 0xcd, 0x1d,
	0xdb, 0x14, 0xd9, 0xc6, 0x9b, 0xa7, 0x7c, 0x64, 0x40, 0x79, 0x6f, 0x3e, 0x2a, 0x9a, 0xbe, 0x53,
	0x32, 0x4d, 0x5e, 0x61, 0x7c, 0x75, 0xb1, 0x41, 0xcd, 0xda, 0xeb, 0x50, 0x2f, 0x23, 0xdf, 0x02,
	0xea, 0x96, 0xcd, 0x6f, 0x01, 0x3d, 0xce, 0xcd, 0x39, 0x03, 0x71, 0xa1, 0xb3, 0x7d, 0x81, 0x70,
	0x70, 0xdd, 0xa8, 0x1f, 0xdf, 0x01, 0xde, 0xca, 0xc7, 0xc1, 0x41, 0x07, 0x68, 0x67, 0xe3, 0x66,
	0x03, 0x5c, 0x76, 0x90, 0xa3, 0x92, 0xc2, 0xaa, 0x55, 0xb8, 0xbb, 0x56, 0xa1, 0x63, 0x2e, 0x4a,
	0xec, 0x7e, 0xad, 0xe2, 0x9a, 0x95, 0x48, 0x2e, 0x10, 0xc6, 0x57, 0xb7, 0x4c, 0x9e, 0xad, 0x56,
	0xf3, 0xef, 0x55, 0x6c, 0x46, 0xb7, 0xe8, 0x70, 0x4a, 0xda, 0xfb, 0xef, 0xbf, 0xff, 0xfa, 0x58,
	0xdd, 0x25, 0x4f, 0xd8, 0xba, 0x87, 0xd0, 0x4b, 0xc1, 0x90, 0x4f, 0x08, 0xd7, 0x0b, 0xa3, 0x24,
	0x37, 0x64, 0x2c, 0xec, 0x57, 0xb3, 0x7b, 0x9b, 0x16, 0xaf, 0x92, 0x5a, 0x95, 0x7b, 0xa4, 0xb3,
	0x5e, 0xe5, 0x88, 0x6b, 0x73, 0x78, 0xf0, 0x65, 0x1e, 0xa2, 0xcb, 0x79, 0x88, 0x7e, 0xce, 0x43,
	0xf4, 0x61, 0x11, 0x56, 0x2e, 0x17, 0x61, 0xe5, 0xc7, 0x22, 0xac, 0xbc, 0x6d, 0x95, 0xc9, 0x07,
	0x72, 0xcc, 0xa6, 0x7f, 0x8f, 0x31, 0xb3, 0x0c, 0x74, 0x7f, 0xd3, 0x56, 0x9f, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xee, 0x31, 0xe2, 0xa4, 0xe9, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Gets the stored data for the given owner and index.
	StorageGet(ctx context.Context, in *QueryStorageGetRequest, opts ...grpc.CallOption) (*QueryStorageGetResponse, error)
	// Lists all storage entries for the owner under a given index prefix. Use
	// filter and extract to filter and extract the data and iterate over the data
	// efficiently.
	StorageList(ctx context.Context, in *QueryStorageListRequest, opts ...grpc.CallOption) (*QueryStorageListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) StorageGet(ctx context.Context, in *QueryStorageGetRequest, opts ...grpc.CallOption) (*QueryStorageGetResponse, error) {
	out := new(QueryStorageGetResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.storage.v1.Query/StorageGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StorageList(ctx context.Context, in *QueryStorageListRequest, opts ...grpc.CallOption) (*QueryStorageListResponse, error) {
	out := new(QueryStorageListResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.storage.v1.Query/StorageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Gets the stored data for the given owner and index.
	StorageGet(context.Context, *QueryStorageGetRequest) (*QueryStorageGetResponse, error)
	// Lists all storage entries for the owner under a given index prefix. Use
	// filter and extract to filter and extract the data and iterate over the data
	// efficiently.
	StorageList(context.Context, *QueryStorageListRequest) (*QueryStorageListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) StorageGet(ctx context.Context, req *QueryStorageGetRequest) (*QueryStorageGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageGet not implemented")
}
func (*UnimplementedQueryServer) StorageList(ctx context.Context, req *QueryStorageListRequest) (*QueryStorageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageList not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_StorageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStorageGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StorageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.storage.v1.Query/StorageGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StorageGet(ctx, req.(*QueryStorageGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StorageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStorageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StorageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.storage.v1.Query/StorageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StorageList(ctx, req.(*QueryStorageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dysonprotocol.storage.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorageGet",
			Handler:    _Query_StorageGet_Handler,
		},
		{
			MethodName: "StorageList",
			Handler:    _Query_StorageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dysonprotocol/storage/v1/query.proto",
}

func (m *QueryStorageGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extract) > 0 {
		i -= len(m.Extract)
		copy(dAtA[i:], m.Extract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Extract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStorageGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStorageListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Extract) > 0 {
		i -= len(m.Extract)
		copy(dAtA[i:], m.Extract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Extract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IndexPrefix) > 0 {
		i -= len(m.IndexPrefix)
		copy(dAtA[i:], m.IndexPrefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IndexPrefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStorageListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStorageGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Extract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStorageGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStorageListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IndexPrefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Extract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStorageListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStorageGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStorageGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &Storage{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStorageListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStorageListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Storage{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
