// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dysonprotocol/script/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryScriptInfoRequest is the Query/ScriptInfo request type.
type QueryScriptInfoRequest struct {
	// address is the account address of the script.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryScriptInfoRequest) Reset()         { *m = QueryScriptInfoRequest{} }
func (m *QueryScriptInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryScriptInfoRequest) ProtoMessage()    {}
func (*QueryScriptInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{0}
}
func (m *QueryScriptInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScriptInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScriptInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScriptInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScriptInfoRequest.Merge(m, src)
}
func (m *QueryScriptInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryScriptInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScriptInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScriptInfoRequest proto.InternalMessageInfo

func (m *QueryScriptInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryScriptInfoResponse is the Query/ScriptInfo response type.
type QueryScriptInfoResponse struct {
	// info is the ScriptInfo of the script.
	Script *Script `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *QueryScriptInfoResponse) Reset()         { *m = QueryScriptInfoResponse{} }
func (m *QueryScriptInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryScriptInfoResponse) ProtoMessage()    {}
func (*QueryScriptInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{1}
}
func (m *QueryScriptInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScriptInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScriptInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScriptInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScriptInfoResponse.Merge(m, src)
}
func (m *QueryScriptInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryScriptInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScriptInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScriptInfoResponse proto.InternalMessageInfo

func (m *QueryScriptInfoResponse) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

// QueryWebRequest is the Query/Web request type.
type QueryWebRequest struct {
	// address is the account address of the script.
	AddressOrName string `protobuf:"bytes,1,opt,name=address_or_name,json=addressOrName,proto3" json:"address_or_name,omitempty"`
	// httprequest is the http request.
	Httprequest string `protobuf:"bytes,2,opt,name=httprequest,proto3" json:"httprequest,omitempty"`
}

func (m *QueryWebRequest) Reset()         { *m = QueryWebRequest{} }
func (m *QueryWebRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWebRequest) ProtoMessage()    {}
func (*QueryWebRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{2}
}
func (m *QueryWebRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWebRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWebRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWebRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWebRequest.Merge(m, src)
}
func (m *QueryWebRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWebRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWebRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWebRequest proto.InternalMessageInfo

func (m *QueryWebRequest) GetAddressOrName() string {
	if m != nil {
		return m.AddressOrName
	}
	return ""
}

func (m *QueryWebRequest) GetHttprequest() string {
	if m != nil {
		return m.Httprequest
	}
	return ""
}

// QueryWebResponse is the Query/Web response type.
type QueryWebResponse struct {
	// httpresponse is the http response.
	Httpresponse string `protobuf:"bytes,1,opt,name=httpresponse,proto3" json:"httpresponse,omitempty"`
}

func (m *QueryWebResponse) Reset()         { *m = QueryWebResponse{} }
func (m *QueryWebResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWebResponse) ProtoMessage()    {}
func (*QueryWebResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{3}
}
func (m *QueryWebResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWebResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWebResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWebResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWebResponse.Merge(m, src)
}
func (m *QueryWebResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWebResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWebResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWebResponse proto.InternalMessageInfo

func (m *QueryWebResponse) GetHttpresponse() string {
	if m != nil {
		return m.Httpresponse
	}
	return ""
}

// QueryEncodeJsonRequest is the Query/EncodeJson request type.
type QueryEncodeJsonRequest struct {
	// json is the json string to encode.
	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *QueryEncodeJsonRequest) Reset()         { *m = QueryEncodeJsonRequest{} }
func (m *QueryEncodeJsonRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncodeJsonRequest) ProtoMessage()    {}
func (*QueryEncodeJsonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{4}
}
func (m *QueryEncodeJsonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncodeJsonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncodeJsonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncodeJsonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncodeJsonRequest.Merge(m, src)
}
func (m *QueryEncodeJsonRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncodeJsonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncodeJsonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncodeJsonRequest proto.InternalMessageInfo

func (m *QueryEncodeJsonRequest) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

// QueryEncodeJsonResponse is the Query/EncodeJson response type.
type QueryEncodeJsonResponse struct {
	// bytes is the encoded bytes.
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *QueryEncodeJsonResponse) Reset()         { *m = QueryEncodeJsonResponse{} }
func (m *QueryEncodeJsonResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncodeJsonResponse) ProtoMessage()    {}
func (*QueryEncodeJsonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{5}
}
func (m *QueryEncodeJsonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncodeJsonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncodeJsonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncodeJsonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncodeJsonResponse.Merge(m, src)
}
func (m *QueryEncodeJsonResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncodeJsonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncodeJsonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncodeJsonResponse proto.InternalMessageInfo

func (m *QueryEncodeJsonResponse) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// QueryDecodeBytesRequest is the Query/DecodeBytes request type.
type QueryDecodeBytesRequest struct {
	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// bytes is the encoded bytes.
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *QueryDecodeBytesRequest) Reset()         { *m = QueryDecodeBytesRequest{} }
func (m *QueryDecodeBytesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDecodeBytesRequest) ProtoMessage()    {}
func (*QueryDecodeBytesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{6}
}
func (m *QueryDecodeBytesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecodeBytesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecodeBytesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecodeBytesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecodeBytesRequest.Merge(m, src)
}
func (m *QueryDecodeBytesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecodeBytesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecodeBytesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecodeBytesRequest proto.InternalMessageInfo

func (m *QueryDecodeBytesRequest) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *QueryDecodeBytesRequest) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// QueryDecodeBytesResponse is the Query/DecodeBytes response type.
type QueryDecodeBytesResponse struct {
	// json is the decoded json string.
	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *QueryDecodeBytesResponse) Reset()         { *m = QueryDecodeBytesResponse{} }
func (m *QueryDecodeBytesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDecodeBytesResponse) ProtoMessage()    {}
func (*QueryDecodeBytesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{7}
}
func (m *QueryDecodeBytesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecodeBytesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecodeBytesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecodeBytesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecodeBytesResponse.Merge(m, src)
}
func (m *QueryDecodeBytesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecodeBytesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecodeBytesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecodeBytesResponse proto.InternalMessageInfo

func (m *QueryDecodeBytesResponse) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type QueryVerifyTxRequest struct {
	// The transaction as a JSON string
	TxJson string `protobuf:"bytes,1,opt,name=tx_json,json=txJson,proto3" json:"tx_json,omitempty"`
}

func (m *QueryVerifyTxRequest) Reset()         { *m = QueryVerifyTxRequest{} }
func (m *QueryVerifyTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyTxRequest) ProtoMessage()    {}
func (*QueryVerifyTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{8}
}
func (m *QueryVerifyTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyTxRequest.Merge(m, src)
}
func (m *QueryVerifyTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyTxRequest proto.InternalMessageInfo

func (m *QueryVerifyTxRequest) GetTxJson() string {
	if m != nil {
		return m.TxJson
	}
	return ""
}

// QueryVerifyTxResponse will be empty response on success, error will be raised
// on failure
type QueryVerifyTxResponse struct {
}

func (m *QueryVerifyTxResponse) Reset()         { *m = QueryVerifyTxResponse{} }
func (m *QueryVerifyTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyTxResponse) ProtoMessage()    {}
func (*QueryVerifyTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{9}
}
func (m *QueryVerifyTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyTxResponse.Merge(m, src)
}
func (m *QueryVerifyTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyTxResponse proto.InternalMessageInfo

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4e496d35dcddd4, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryScriptInfoRequest)(nil), "dysonprotocol.script.v1.QueryScriptInfoRequest")
	proto.RegisterType((*QueryScriptInfoResponse)(nil), "dysonprotocol.script.v1.QueryScriptInfoResponse")
	proto.RegisterType((*QueryWebRequest)(nil), "dysonprotocol.script.v1.QueryWebRequest")
	proto.RegisterType((*QueryWebResponse)(nil), "dysonprotocol.script.v1.QueryWebResponse")
	proto.RegisterType((*QueryEncodeJsonRequest)(nil), "dysonprotocol.script.v1.QueryEncodeJsonRequest")
	proto.RegisterType((*QueryEncodeJsonResponse)(nil), "dysonprotocol.script.v1.QueryEncodeJsonResponse")
	proto.RegisterType((*QueryDecodeBytesRequest)(nil), "dysonprotocol.script.v1.QueryDecodeBytesRequest")
	proto.RegisterType((*QueryDecodeBytesResponse)(nil), "dysonprotocol.script.v1.QueryDecodeBytesResponse")
	proto.RegisterType((*QueryVerifyTxRequest)(nil), "dysonprotocol.script.v1.QueryVerifyTxRequest")
	proto.RegisterType((*QueryVerifyTxResponse)(nil), "dysonprotocol.script.v1.QueryVerifyTxResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "dysonprotocol.script.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dysonprotocol.script.v1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("dysonprotocol/script/v1/query.proto", fileDescriptor_0b4e496d35dcddd4)
}

var fileDescriptor_0b4e496d35dcddd4 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0x22, 0xb4, 0x38, 0x60, 0xd0, 0xb1, 0xda, 0xd2, 0x98, 0x82, 0x2b, 0xf2, 0x4b, 0xd8,
	0xa1, 0x98, 0x60, 0x42, 0xe2, 0xc1, 0x46, 0x0f, 0x12, 0xe3, 0x8f, 0x82, 0x92, 0xe8, 0x61, 0xb3,
	0x6d, 0x87, 0xba, 0xa6, 0x9d, 0x59, 0x76, 0x86, 0xda, 0xc6, 0x78, 0xf1, 0xaa, 0x07, 0x13, 0xe3,
	0xd1, 0x83, 0x27, 0x13, 0xcf, 0xfe, 0x11, 0x1c, 0x89, 0x5e, 0x3c, 0x19, 0x03, 0xfe, 0x21, 0x66,
	0x67, 0xde, 0xda, 0x96, 0xb2, 0x6d, 0xbd, 0x34, 0x3b, 0xef, 0x7d, 0xdf, 0xf7, 0xbe, 0x79, 0x7d,
	0x6f, 0x17, 0x5d, 0x29, 0x37, 0x05, 0x67, 0x9e, 0xcf, 0x25, 0x2f, 0xf1, 0x2a, 0x11, 0x25, 0xdf,
	0xf5, 0x24, 0xa9, 0xe7, 0xc8, 0xee, 0x1e, 0xf5, 0x9b, 0x96, 0x4a, 0xe0, 0x54, 0x07, 0xc8, 0xd2,
	0x20, 0xab, 0x9e, 0xcb, 0xcc, 0x44, 0xb1, 0x01, 0xa2, 0x32, 0x99, 0xe9, 0x28, 0x94, 0x6c, 0x00,
	0x22, 0x52, 0xc7, 0x73, 0x7c, 0xa7, 0x26, 0x00, 0x95, 0x2d, 0x71, 0x51, 0xe3, 0x82, 0x14, 0x1d,
	0x41, 0x49, 0x3d, 0x57, 0xa4, 0xd2, 0xc9, 0x91, 0x12, 0x77, 0x19, 0xe4, 0x93, 0x15, 0x5e, 0xe1,
	0xea, 0x91, 0x04, 0x4f, 0x10, 0xbd, 0x54, 0xe1, 0xbc, 0x52, 0xa5, 0xc4, 0xf1, 0x5c, 0xe2, 0x30,
	0xc6, 0xa5, 0x23, 0x5d, 0xce, 0x42, 0xcd, 0xc5, 0x76, 0x4d, 0x75, 0xe7, 0x7f, 0xca, 0x9e, 0x53,
	0x71, 0x99, 0x02, 0x03, 0x76, 0x52, 0x63, 0x6d, 0x5d, 0x42, 0x1f, 0x20, 0x75, 0xce, 0xa9, 0xb9,
	0x8c, 0x13, 0xf5, 0xab, 0x43, 0xe6, 0x3d, 0x74, 0xf1, 0x51, 0xa0, 0xb7, 0xa9, 0x2e, 0x73, 0x97,
	0xed, 0xf0, 0x02, 0xdd, 0xdd, 0xa3, 0x42, 0xe2, 0x55, 0x94, 0x70, 0xca, 0x65, 0x9f, 0x0a, 0x91,
	0x36, 0xa6, 0x8d, 0xf9, 0xd3, 0xf9, 0xf4, 0xf7, 0x6f, 0xcb, 0x49, 0xd0, 0xbb, 0xa5, 0x33, 0x9b,
	0xd2, 0x77, 0x59, 0xa5, 0x10, 0x02, 0xcd, 0x02, 0x4a, 0x75, 0xa9, 0x09, 0x8f, 0x33, 0x41, 0xf1,
	0x0d, 0x14, 0xd7, 0x0d, 0x53, 0x6a, 0x63, 0xab, 0x53, 0x56, 0xc4, 0xdf, 0x65, 0x69, 0x72, 0x01,
	0xe0, 0xe6, 0x33, 0x34, 0xa1, 0x34, 0xb7, 0x69, 0x31, 0xb4, 0x36, 0x8b, 0x26, 0xa0, 0xa2, 0xcd,
	0x7d, 0x9b, 0x39, 0x35, 0xaa, 0x2d, 0x16, 0xce, 0x40, 0xf8, 0x81, 0x7f, 0xdf, 0xa9, 0x51, 0x3c,
	0x8d, 0xc6, 0x9e, 0x4b, 0xe9, 0xf9, 0x9a, 0x96, 0x1e, 0x52, 0x98, 0xf6, 0x90, 0xb9, 0x86, 0xce,
	0xb6, 0xc4, 0xc1, 0xa9, 0x89, 0xc6, 0x35, 0x44, 0x9f, 0x41, 0xba, 0x23, 0x66, 0x2e, 0x41, 0xdb,
	0xee, 0xb0, 0x12, 0x2f, 0xd3, 0x0d, 0xc1, 0x59, 0xe8, 0x0d, 0xa3, 0xe1, 0x17, 0x82, 0x33, 0x60,
	0xa9, 0x67, 0x93, 0x40, 0x5b, 0xda, 0xd1, 0x50, 0x2c, 0x89, 0x46, 0x8a, 0x4d, 0x49, 0x75, 0x8f,
	0xc7, 0x0b, 0xfa, 0x60, 0x6e, 0x00, 0xe1, 0x36, 0x0d, 0x08, 0xf9, 0x20, 0x16, 0xea, 0x4f, 0xa2,
	0x51, 0xd9, 0xf4, 0xa8, 0xbd, 0xe7, 0x57, 0xa1, 0x46, 0x22, 0x38, 0x3f, 0xf6, 0xab, 0x2d, 0xad,
	0xa1, 0x76, 0x2d, 0x0b, 0xa5, 0xbb, 0xb5, 0xa0, 0xfa, 0xc9, 0x66, 0x93, 0x0a, 0xff, 0x84, 0xfa,
	0xee, 0x4e, 0x73, 0xab, 0x11, 0x16, 0x4e, 0xa1, 0x84, 0x6c, 0xd8, 0x6d, 0xf0, 0xb8, 0x6c, 0x04,
	0x57, 0x31, 0x53, 0xe8, 0xc2, 0x31, 0x02, 0x34, 0x29, 0x89, 0xb0, 0x4a, 0x3c, 0x54, 0xeb, 0x01,
	0x3a, 0xe6, 0x16, 0x3a, 0xdf, 0x11, 0x05, 0x2b, 0x37, 0x51, 0x5c, 0xaf, 0x51, 0xdf, 0xf9, 0xd0,
	0xc4, 0xfc, 0xf0, 0xfe, 0xaf, 0xa9, 0x58, 0x01, 0x48, 0xab, 0x5f, 0x13, 0x68, 0x44, 0xc9, 0xe2,
	0x2f, 0x06, 0x42, 0xad, 0xf9, 0xc3, 0x24, 0x52, 0xe7, 0xe4, 0xb9, 0xcf, 0xac, 0x0c, 0x4e, 0x80,
	0x7b, 0xae, 0xbd, 0xf9, 0xf1, 0xe7, 0xc3, 0xd0, 0x0a, 0xb6, 0x48, 0xef, 0x17, 0x8d, 0xed, 0xb2,
	0x1d, 0x4e, 0x5e, 0xc1, 0x8c, 0xbe, 0xc6, 0x6f, 0x0d, 0x74, 0x6a, 0x9b, 0x16, 0xf1, 0x7c, 0xef,
	0x8a, 0xad, 0xc1, 0xcf, 0x2c, 0x0c, 0x80, 0x04, 0x53, 0x44, 0x99, 0x5a, 0x58, 0x37, 0x16, 0xcd,
	0x99, 0x48, 0x5f, 0x2f, 0x69, 0xd1, 0x86, 0x55, 0xc0, 0x9f, 0x0c, 0x84, 0x5a, 0x03, 0xda, 0xaf,
	0x6f, 0x5d, 0x83, 0xdf, 0xaf, 0x6f, 0xdd, 0xb3, 0x6f, 0x2e, 0x29, 0x8b, 0xb3, 0x38, 0xda, 0x1f,
	0x55, 0x24, 0x35, 0x74, 0xf8, 0xb3, 0x81, 0xc6, 0xda, 0x66, 0x18, 0xf7, 0xa9, 0xd7, 0xbd, 0x3a,
	0x99, 0xdc, 0x7f, 0x30, 0xc0, 0xe2, 0xb2, 0xb2, 0x38, 0x87, 0xaf, 0x46, 0x5a, 0x2c, 0x2b, 0x96,
	0xad, 0x76, 0x0d, 0x7f, 0x34, 0xd0, 0x68, 0xb8, 0x06, 0x78, 0xb9, 0x77, 0xb9, 0x63, 0xfb, 0x95,
	0xb1, 0x06, 0x85, 0x83, 0xb5, 0x45, 0x65, 0x6d, 0x06, 0x9b, 0x91, 0xd6, 0xea, 0x8a, 0x62, 0xcb,
	0x06, 0x7e, 0x67, 0xa0, 0xb8, 0x5e, 0x1b, 0x7c, 0xad, 0x77, 0x99, 0x8e, 0x5d, 0xcd, 0x2c, 0x0d,
	0x06, 0x06, 0x47, 0x73, 0xca, 0xd1, 0x65, 0x3c, 0x45, 0x7a, 0x7f, 0x28, 0xf3, 0xeb, 0xfb, 0x87,
	0x59, 0xe3, 0xe0, 0x30, 0x6b, 0xfc, 0x3e, 0xcc, 0x1a, 0xef, 0x8f, 0xb2, 0xb1, 0x83, 0xa3, 0x6c,
	0xec, 0xe7, 0x51, 0x36, 0xf6, 0xb4, 0xf3, 0x23, 0x6c, 0x95, 0x78, 0x8d, 0x34, 0x42, 0x7e, 0xf0,
	0x9a, 0x13, 0xc5, 0xb8, 0x4a, 0x5e, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xdc, 0x00, 0x18,
	0x13, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ScriptInfo queries script info based on script address
	ScriptInfo(ctx context.Context, in *QueryScriptInfoRequest, opts ...grpc.CallOption) (*QueryScriptInfoResponse, error)
	// Queries the WSGI web application function of a script.
	Web(ctx context.Context, in *QueryWebRequest, opts ...grpc.CallOption) (*QueryWebResponse, error)
	// EncodeJson encodes a JSON string to bytes.
	EncodeJson(ctx context.Context, in *QueryEncodeJsonRequest, opts ...grpc.CallOption) (*QueryEncodeJsonResponse, error)
	// DecodeBytes decodes bytes to a JSON string.
	DecodeBytes(ctx context.Context, in *QueryDecodeBytesRequest, opts ...grpc.CallOption) (*QueryDecodeBytesResponse, error)
	// VerifyTx verifies a transaction.
	VerifyTx(ctx context.Context, in *QueryVerifyTxRequest, opts ...grpc.CallOption) (*QueryVerifyTxResponse, error)
	// Params queries the parameters of the script module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ScriptInfo(ctx context.Context, in *QueryScriptInfoRequest, opts ...grpc.CallOption) (*QueryScriptInfoResponse, error) {
	out := new(QueryScriptInfoResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Query/ScriptInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Web(ctx context.Context, in *QueryWebRequest, opts ...grpc.CallOption) (*QueryWebResponse, error) {
	out := new(QueryWebResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Query/Web", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncodeJson(ctx context.Context, in *QueryEncodeJsonRequest, opts ...grpc.CallOption) (*QueryEncodeJsonResponse, error) {
	out := new(QueryEncodeJsonResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Query/EncodeJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DecodeBytes(ctx context.Context, in *QueryDecodeBytesRequest, opts ...grpc.CallOption) (*QueryDecodeBytesResponse, error) {
	out := new(QueryDecodeBytesResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Query/DecodeBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyTx(ctx context.Context, in *QueryVerifyTxRequest, opts ...grpc.CallOption) (*QueryVerifyTxResponse, error) {
	out := new(QueryVerifyTxResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Query/VerifyTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ScriptInfo queries script info based on script address
	ScriptInfo(context.Context, *QueryScriptInfoRequest) (*QueryScriptInfoResponse, error)
	// Queries the WSGI web application function of a script.
	Web(context.Context, *QueryWebRequest) (*QueryWebResponse, error)
	// EncodeJson encodes a JSON string to bytes.
	EncodeJson(context.Context, *QueryEncodeJsonRequest) (*QueryEncodeJsonResponse, error)
	// DecodeBytes decodes bytes to a JSON string.
	DecodeBytes(context.Context, *QueryDecodeBytesRequest) (*QueryDecodeBytesResponse, error)
	// VerifyTx verifies a transaction.
	VerifyTx(context.Context, *QueryVerifyTxRequest) (*QueryVerifyTxResponse, error)
	// Params queries the parameters of the script module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ScriptInfo(ctx context.Context, req *QueryScriptInfoRequest) (*QueryScriptInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptInfo not implemented")
}
func (*UnimplementedQueryServer) Web(ctx context.Context, req *QueryWebRequest) (*QueryWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Web not implemented")
}
func (*UnimplementedQueryServer) EncodeJson(ctx context.Context, req *QueryEncodeJsonRequest) (*QueryEncodeJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeJson not implemented")
}
func (*UnimplementedQueryServer) DecodeBytes(ctx context.Context, req *QueryDecodeBytesRequest) (*QueryDecodeBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeBytes not implemented")
}
func (*UnimplementedQueryServer) VerifyTx(ctx context.Context, req *QueryVerifyTxRequest) (*QueryVerifyTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTx not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ScriptInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScriptInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Query/ScriptInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptInfo(ctx, req.(*QueryScriptInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Web_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Web(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Query/Web",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Web(ctx, req.(*QueryWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncodeJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncodeJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncodeJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Query/EncodeJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncodeJson(ctx, req.(*QueryEncodeJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DecodeBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDecodeBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DecodeBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Query/DecodeBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DecodeBytes(ctx, req.(*QueryDecodeBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Query/VerifyTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyTx(ctx, req.(*QueryVerifyTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dysonprotocol.script.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScriptInfo",
			Handler:    _Query_ScriptInfo_Handler,
		},
		{
			MethodName: "Web",
			Handler:    _Query_Web_Handler,
		},
		{
			MethodName: "EncodeJson",
			Handler:    _Query_EncodeJson_Handler,
		},
		{
			MethodName: "DecodeBytes",
			Handler:    _Query_DecodeBytes_Handler,
		},
		{
			MethodName: "VerifyTx",
			Handler:    _Query_VerifyTx_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dysonprotocol/script/v1/query.proto",
}

func (m *QueryScriptInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScriptInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScriptInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryScriptInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScriptInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScriptInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Script != nil {
		{
			size, err := m.Script.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWebRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWebRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWebRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Httprequest) > 0 {
		i -= len(m.Httprequest)
		copy(dAtA[i:], m.Httprequest)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Httprequest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressOrName) > 0 {
		i -= len(m.AddressOrName)
		copy(dAtA[i:], m.AddressOrName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AddressOrName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWebResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWebResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWebResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Httpresponse) > 0 {
		i -= len(m.Httpresponse)
		copy(dAtA[i:], m.Httpresponse)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Httpresponse)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncodeJsonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncodeJsonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncodeJsonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Json) > 0 {
		i -= len(m.Json)
		copy(dAtA[i:], m.Json)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Json)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncodeJsonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncodeJsonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncodeJsonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecodeBytesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecodeBytesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecodeBytesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TypeUrl) > 0 {
		i -= len(m.TypeUrl)
		copy(dAtA[i:], m.TypeUrl)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecodeBytesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecodeBytesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecodeBytesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Json) > 0 {
		i -= len(m.Json)
		copy(dAtA[i:], m.Json)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Json)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxJson) > 0 {
		i -= len(m.TxJson)
		copy(dAtA[i:], m.TxJson)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxJson)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryScriptInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryScriptInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Script != nil {
		l = m.Script.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWebRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddressOrName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Httprequest)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWebResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Httpresponse)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncodeJsonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Json)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncodeJsonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecodeBytesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecodeBytesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Json)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxJson)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryScriptInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScriptInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScriptInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScriptInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScriptInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScriptInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Script == nil {
				m.Script = &Script{}
			}
			if err := m.Script.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWebRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWebRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWebRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressOrName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressOrName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Httprequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Httprequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWebResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWebResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWebResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Httpresponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Httpresponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncodeJsonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncodeJsonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncodeJsonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Json = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncodeJsonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncodeJsonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncodeJsonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecodeBytesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecodeBytesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecodeBytesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecodeBytesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecodeBytesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecodeBytesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Json = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
