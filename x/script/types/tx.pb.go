// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dysonprotocol/script/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	any "github.com/cosmos/gogoproto/types/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateScript is the Msg/UpdateScript request type.
type MsgUpdateScript struct {
	// address is the account address of the script.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// script is the updated script.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *MsgUpdateScript) Reset()         { *m = MsgUpdateScript{} }
func (m *MsgUpdateScript) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateScript) ProtoMessage()    {}
func (*MsgUpdateScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{0}
}
func (m *MsgUpdateScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateScript.Merge(m, src)
}
func (m *MsgUpdateScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateScript proto.InternalMessageInfo

func (m *MsgUpdateScript) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgUpdateScript) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// MsgUpdateScriptResponse is the Msg/UpdateScript response type.
type MsgUpdateScriptResponse struct {
	// version is the updated script version.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *MsgUpdateScriptResponse) Reset()         { *m = MsgUpdateScriptResponse{} }
func (m *MsgUpdateScriptResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateScriptResponse) ProtoMessage()    {}
func (*MsgUpdateScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{1}
}
func (m *MsgUpdateScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateScriptResponse.Merge(m, src)
}
func (m *MsgUpdateScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateScriptResponse proto.InternalMessageInfo

func (m *MsgUpdateScriptResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// MsgExec executes a script by calling a function with arguments.
type MsgExec struct {
	// executor is the account address used to execute the script.
	ExecutorAddress string `protobuf:"bytes,1,opt,name=executor_address,json=executorAddress,proto3" json:"executor_address,omitempty"`
	// address is the script address to execute.
	// This can be either a bech32 address or a nameservice name (e.g.,
	// "example.dys")
	ScriptAddress string `protobuf:"bytes,2,opt,name=script_address,json=scriptAddress,proto3" json:"script_address,omitempty"`
	// Only if the executor is the owner of the script  will the optional
	// extra_code be temporary appended to the script for this message before
	// calling the function.
	ExtraCode string `protobuf:"bytes,3,opt,name=extra_code,json=extraCode,proto3" json:"extra_code,omitempty"`
	// The function name to run
	FunctionName string `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// The positional arguments to pass to the function (*args) encoded as a
	// json list
	Args string `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
	// The keyword argument to pass to the function (**kwargs) encoded as a
	// json dict
	Kwargs string `protobuf:"bytes,6,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
	// Any attached_messages is the list of attached messages
	// to run before the script and the result will be passed
	// to the script. If any of the attached messages fails,
	// the script execution will be aborted.
	AttachedMessages []*any.Any `protobuf:"bytes,7,rep,name=attached_messages,json=attachedMessages,proto3" json:"attached_messages,omitempty"`
}

func (m *MsgExec) Reset()         { *m = MsgExec{} }
func (m *MsgExec) String() string { return proto.CompactTextString(m) }
func (*MsgExec) ProtoMessage()    {}
func (*MsgExec) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{2}
}
func (m *MsgExec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExec.Merge(m, src)
}
func (m *MsgExec) XXX_Size() int {
	return m.Size()
}
func (m *MsgExec) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExec.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExec proto.InternalMessageInfo

func (m *MsgExec) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

func (m *MsgExec) GetScriptAddress() string {
	if m != nil {
		return m.ScriptAddress
	}
	return ""
}

func (m *MsgExec) GetExtraCode() string {
	if m != nil {
		return m.ExtraCode
	}
	return ""
}

func (m *MsgExec) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *MsgExec) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *MsgExec) GetKwargs() string {
	if m != nil {
		return m.Kwargs
	}
	return ""
}

func (m *MsgExec) GetAttachedMessages() []*any.Any {
	if m != nil {
		return m.AttachedMessages
	}
	return nil
}

// MsgExecResponse is the Msg/Exec request type.
type MsgExecResponse struct {
	// result is the final result of the proposal execution.
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// Results of the attached messages.
	AttachedMessageResults []*any.Any `protobuf:"bytes,4,rep,name=attached_message_results,json=attachedMessageResults,proto3" json:"attached_message_results,omitempty"`
}

func (m *MsgExecResponse) Reset()         { *m = MsgExecResponse{} }
func (m *MsgExecResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecResponse) ProtoMessage()    {}
func (*MsgExecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{3}
}
func (m *MsgExecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecResponse.Merge(m, src)
}
func (m *MsgExecResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecResponse proto.InternalMessageInfo

func (m *MsgExecResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *MsgExecResponse) GetAttachedMessageResults() []*any.Any {
	if m != nil {
		return m.AttachedMessageResults
	}
	return nil
}

// MsgCreateNewScript is the Msg/CreateNewScript request type.
type MsgCreateNewScript struct {
	// creator is the account address creating the script.
	CreatorAddress string `protobuf:"bytes,1,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	// code is the script content.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *MsgCreateNewScript) Reset()         { *m = MsgCreateNewScript{} }
func (m *MsgCreateNewScript) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNewScript) ProtoMessage()    {}
func (*MsgCreateNewScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{4}
}
func (m *MsgCreateNewScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNewScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNewScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNewScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNewScript.Merge(m, src)
}
func (m *MsgCreateNewScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNewScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNewScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNewScript proto.InternalMessageInfo

func (m *MsgCreateNewScript) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *MsgCreateNewScript) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// MsgCreateNewScriptResponse is the Msg/CreateNewScript response type.
type MsgCreateNewScriptResponse struct {
	// script_address is the address of the newly created script.
	ScriptAddress string `protobuf:"bytes,1,opt,name=script_address,json=scriptAddress,proto3" json:"script_address,omitempty"`
	// version is the initial script version.
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *MsgCreateNewScriptResponse) Reset()         { *m = MsgCreateNewScriptResponse{} }
func (m *MsgCreateNewScriptResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNewScriptResponse) ProtoMessage()    {}
func (*MsgCreateNewScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{5}
}
func (m *MsgCreateNewScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNewScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNewScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNewScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNewScriptResponse.Merge(m, src)
}
func (m *MsgCreateNewScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNewScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNewScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNewScriptResponse proto.InternalMessageInfo

func (m *MsgCreateNewScriptResponse) GetScriptAddress() string {
	if m != nil {
		return m.ScriptAddress
	}
	return ""
}

func (m *MsgCreateNewScriptResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/script parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgArbitraryData is used for signing arbitrary data for verification purposes
type MsgArbitraryData struct {
	// signer is the account address signing the data
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// data is the arbitrary data being signed
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// app_domain is an optional application domain for the data
	AppDomain string `protobuf:"bytes,3,opt,name=app_domain,json=appDomain,proto3" json:"app_domain,omitempty"`
}

func (m *MsgArbitraryData) Reset()         { *m = MsgArbitraryData{} }
func (m *MsgArbitraryData) String() string { return proto.CompactTextString(m) }
func (*MsgArbitraryData) ProtoMessage()    {}
func (*MsgArbitraryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{8}
}
func (m *MsgArbitraryData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitraryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitraryData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitraryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitraryData.Merge(m, src)
}
func (m *MsgArbitraryData) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitraryData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitraryData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitraryData proto.InternalMessageInfo

func (m *MsgArbitraryData) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgArbitraryData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MsgArbitraryData) GetAppDomain() string {
	if m != nil {
		return m.AppDomain
	}
	return ""
}

// MsgArbitraryDataResponse is the response for MsgArbitraryData
type MsgArbitraryDataResponse struct {
}

func (m *MsgArbitraryDataResponse) Reset()         { *m = MsgArbitraryDataResponse{} }
func (m *MsgArbitraryDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgArbitraryDataResponse) ProtoMessage()    {}
func (*MsgArbitraryDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_450aca301391b140, []int{9}
}
func (m *MsgArbitraryDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitraryDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitraryDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitraryDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitraryDataResponse.Merge(m, src)
}
func (m *MsgArbitraryDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitraryDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitraryDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitraryDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateScript)(nil), "dysonprotocol.script.v1.MsgUpdateScript")
	proto.RegisterType((*MsgUpdateScriptResponse)(nil), "dysonprotocol.script.v1.MsgUpdateScriptResponse")
	proto.RegisterType((*MsgExec)(nil), "dysonprotocol.script.v1.MsgExec")
	proto.RegisterType((*MsgExecResponse)(nil), "dysonprotocol.script.v1.MsgExecResponse")
	proto.RegisterType((*MsgCreateNewScript)(nil), "dysonprotocol.script.v1.MsgCreateNewScript")
	proto.RegisterType((*MsgCreateNewScriptResponse)(nil), "dysonprotocol.script.v1.MsgCreateNewScriptResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "dysonprotocol.script.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "dysonprotocol.script.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgArbitraryData)(nil), "dysonprotocol.script.v1.MsgArbitraryData")
	proto.RegisterType((*MsgArbitraryDataResponse)(nil), "dysonprotocol.script.v1.MsgArbitraryDataResponse")
}

func init() { proto.RegisterFile("dysonprotocol/script/v1/tx.proto", fileDescriptor_450aca301391b140) }

var fileDescriptor_450aca301391b140 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x4e, 0xeb, 0x46,
	0x14, 0x8e, 0x49, 0x6e, 0x22, 0xe6, 0xfe, 0x84, 0x3b, 0x42, 0xe0, 0xeb, 0xea, 0xe6, 0x46, 0x6e,
	0x2b, 0x45, 0x50, 0x6c, 0x08, 0x12, 0x8b, 0x48, 0x55, 0x15, 0xa0, 0xcb, 0xa0, 0xca, 0xa8, 0x52,
	0xd5, 0x4d, 0x34, 0xd8, 0x83, 0x71, 0x8b, 0x3d, 0xd6, 0xcc, 0x04, 0xe2, 0x5d, 0xd5, 0x45, 0x17,
	0x5d, 0xf5, 0x1d, 0xda, 0x07, 0x40, 0x6a, 0xa5, 0xbe, 0x02, 0x4b, 0xd4, 0x45, 0xd5, 0x55, 0x55,
	0xc1, 0x82, 0xd7, 0xa8, 0xe6, 0xc7, 0x01, 0x1b, 0xe5, 0x87, 0x4d, 0x34, 0xf3, 0xcd, 0x77, 0x7c,
	0xce, 0x7c, 0xe7, 0x3b, 0x13, 0xd0, 0x0e, 0x32, 0x46, 0x92, 0x94, 0x12, 0x4e, 0x7c, 0x72, 0xee,
	0x32, 0x9f, 0x46, 0x29, 0x77, 0x2f, 0x76, 0x5c, 0x3e, 0x76, 0x24, 0x0a, 0xd7, 0x0b, 0x0c, 0x47,
	0x31, 0x9c, 0x8b, 0x1d, 0x6b, 0x35, 0x24, 0x21, 0x91, 0xb8, 0x2b, 0x56, 0x8a, 0x6e, 0xbd, 0xf3,
	0x09, 0x8b, 0x09, 0x1b, 0xaa, 0x03, 0xb5, 0xc9, 0x8f, 0x42, 0x42, 0xc2, 0x73, 0xec, 0xca, 0xdd,
	0xc9, 0xe8, 0xd4, 0x45, 0x49, 0xa6, 0x8f, 0xd6, 0x15, 0xd1, 0x8d, 0x59, 0x28, 0x92, 0xc7, 0x2c,
	0xd4, 0x07, 0x6f, 0x51, 0x1c, 0x25, 0xc4, 0x95, 0xbf, 0x1a, 0xfa, 0x64, 0x5a, 0xc9, 0x29, 0xa2,
	0x28, 0xd6, 0xc9, 0xec, 0x9f, 0x0c, 0xd0, 0x1c, 0xb0, 0xf0, 0xeb, 0x34, 0x40, 0x1c, 0x1f, 0x4b,
	0x0e, 0xec, 0x82, 0x06, 0x0a, 0x02, 0x8a, 0x19, 0x33, 0x8d, 0xb6, 0xd1, 0x59, 0xde, 0x37, 0xff,
	0xfa, 0x63, 0x6b, 0x55, 0xd7, 0xd8, 0x57, 0x27, 0xc7, 0x9c, 0x46, 0x49, 0xe8, 0xe5, 0x44, 0x08,
	0x41, 0xcd, 0x27, 0x01, 0x36, 0x97, 0x44, 0x80, 0x27, 0xd7, 0xbd, 0xcd, 0x1f, 0xef, 0xaf, 0x36,
	0x72, 0xc6, 0xcf, 0xf7, 0x57, 0x1b, 0x56, 0x90, 0xb1, 0xbc, 0x90, 0x52, 0x52, 0x7b, 0x17, 0xac,
	0x97, 0x20, 0x0f, 0xb3, 0x94, 0x24, 0x0c, 0x43, 0x13, 0x34, 0x2e, 0x30, 0x65, 0x11, 0x49, 0x64,
	0x3d, 0x35, 0x2f, 0xdf, 0xda, 0x7f, 0x2f, 0x81, 0xc6, 0x80, 0x85, 0x5f, 0x8e, 0xb1, 0x0f, 0x0f,
	0xc0, 0x0a, 0x1e, 0x63, 0x7f, 0xc4, 0x09, 0x1d, 0x2e, 0x5a, 0x7e, 0x33, 0x8f, 0xd0, 0x30, 0xfc,
	0x14, 0xbc, 0x51, 0xf5, 0x4d, 0x3e, 0xa1, 0x2e, 0xf4, 0x5a, 0xa1, 0x39, 0xed, 0x3d, 0x00, 0x78,
	0xcc, 0x29, 0x1a, 0xca, 0x3b, 0x57, 0x25, 0x65, 0x59, 0x22, 0x07, 0x24, 0xc0, 0xf0, 0x63, 0xf0,
	0xfa, 0x74, 0x94, 0xf8, 0x3c, 0x22, 0xc9, 0x30, 0x41, 0x31, 0x36, 0x6b, 0x92, 0xf1, 0x2a, 0x07,
	0x8f, 0x50, 0x8c, 0x85, 0x62, 0x88, 0x86, 0xcc, 0x7c, 0xa1, 0x14, 0x13, 0x6b, 0xb8, 0x06, 0xea,
	0xdf, 0x5f, 0x4a, 0xb4, 0x2e, 0x51, 0xbd, 0x83, 0x7d, 0xf0, 0x16, 0x71, 0x8e, 0xfc, 0x33, 0x1c,
	0x0c, 0x63, 0xcc, 0x18, 0x0a, 0x31, 0x33, 0x1b, 0xed, 0x6a, 0xe7, 0x65, 0x77, 0xd5, 0x51, 0x76,
	0x71, 0x72, 0xbb, 0x38, 0xfd, 0x24, 0xf3, 0x56, 0x72, 0xfa, 0x40, 0xb3, 0x7b, 0x9f, 0x89, 0x66,
	0x3c, 0x51, 0x48, 0x74, 0x05, 0x16, 0xbb, 0x22, 0xc4, 0xb4, 0x33, 0xe9, 0x0a, 0xb1, 0x9c, 0x74,
	0x61, 0x0d, 0xd4, 0x29, 0x66, 0xa3, 0x73, 0xae, 0x54, 0xf5, 0xf4, 0x0e, 0x1e, 0x01, 0xb3, 0x5c,
	0xdb, 0x50, 0x1d, 0x31, 0xb3, 0x36, 0xa3, 0xc4, 0xb5, 0x52, 0x89, 0x9e, 0x8a, 0xb1, 0x7f, 0x35,
	0x00, 0x1c, 0xb0, 0xf0, 0x80, 0x62, 0xc4, 0xf1, 0x11, 0xbe, 0xd4, 0xa6, 0xec, 0x83, 0xa6, 0x2f,
	0xa0, 0x67, 0x74, 0xf7, 0x8d, 0x0e, 0xe8, 0xcf, 0xf0, 0xe8, 0x9e, 0x90, 0xa5, 0xfc, 0x65, 0xa1,
	0xca, 0xfb, 0xa2, 0x2a, 0xa5, 0x72, 0xec, 0x4b, 0x60, 0x3d, 0x45, 0x27, 0x5a, 0x7d, 0xf1, 0xc4,
	0x46, 0xf3, 0x6a, 0x2d, 0x19, 0xec, 0x91, 0xe5, 0x97, 0x8a, 0x96, 0xff, 0xf3, 0xf1, 0xc0, 0x7e,
	0x25, 0x47, 0x19, 0xee, 0x81, 0x65, 0x34, 0xe2, 0x67, 0x84, 0x46, 0x3c, 0x9b, 0x9b, 0xe9, 0x81,
	0x0a, 0x3f, 0x07, 0x75, 0xf5, 0x18, 0xc8, 0x24, 0x2f, 0xbb, 0x1f, 0x9c, 0x29, 0x8f, 0x98, 0xa3,
	0x12, 0xed, 0xd7, 0xae, 0xff, 0xfd, 0x50, 0xf1, 0x74, 0x50, 0x6f, 0x4b, 0x68, 0xf7, 0xf0, 0xb9,
	0xa9, 0x13, 0xae, 0x82, 0xed, 0x77, 0x8f, 0x26, 0x5c, 0x41, 0xb9, 0x5e, 0xf6, 0x6f, 0x06, 0x58,
	0x19, 0xb0, 0xb0, 0x4f, 0x4f, 0x22, 0x4e, 0x11, 0xcd, 0x0e, 0x11, 0x47, 0x70, 0x1b, 0xd4, 0x59,
	0x14, 0x26, 0x98, 0xce, 0xbd, 0x92, 0xe6, 0x89, 0x06, 0x07, 0x88, 0xa3, 0xbc, 0xc1, 0x62, 0x2d,
	0x46, 0x15, 0xa5, 0xe9, 0x30, 0x20, 0x31, 0x8a, 0x92, 0x7c, 0x54, 0x51, 0x9a, 0x1e, 0x4a, 0x40,
	0xbd, 0x51, 0x3a, 0x5e, 0x5c, 0xe0, 0xa3, 0xe2, 0x05, 0x0a, 0x15, 0xd9, 0x16, 0x30, 0xcb, 0x58,
	0x7e, 0x85, 0xee, 0xef, 0x55, 0x50, 0x1d, 0xb0, 0x10, 0x7e, 0x07, 0x5e, 0x15, 0x1e, 0xd3, 0xce,
	0x54, 0x4d, 0x4b, 0xcf, 0x9d, 0xb5, 0xbd, 0x28, 0x73, 0x62, 0xb3, 0x6f, 0x00, 0x10, 0x23, 0xaa,
	0x33, 0xb5, 0x67, 0xc5, 0x0b, 0x9e, 0xd5, 0x99, 0xc7, 0x98, 0x7c, 0x99, 0x81, 0x66, 0x79, 0x00,
	0x37, 0x67, 0x05, 0x97, 0xc8, 0xd6, 0xee, 0x33, 0xc8, 0x93, 0xa4, 0x13, 0xe9, 0xb4, 0xad, 0x17,
	0x90, 0x4e, 0x31, 0x17, 0x91, 0xae, 0xe8, 0x38, 0xeb, 0xc5, 0x0f, 0xf7, 0x57, 0x1b, 0xc6, 0x7e,
	0xef, 0xfa, 0xb6, 0x65, 0xdc, 0xdc, 0xb6, 0x8c, 0xff, 0x6e, 0x5b, 0xc6, 0x2f, 0x77, 0xad, 0xca,
	0xcd, 0x5d, 0xab, 0xf2, 0xcf, 0x5d, 0xab, 0xf2, 0x6d, 0xf1, 0x1f, 0xdf, 0xf1, 0x49, 0xec, 0x8e,
	0x73, 0x63, 0xf0, 0x2c, 0xc5, 0xec, 0xa4, 0x2e, 0x0f, 0x77, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x65, 0x79, 0x30, 0x77, 0x1c, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Update Script updates the script of the given address and increments the
	// the version.
	UpdateScript(ctx context.Context, in *MsgUpdateScript, opts ...grpc.CallOption) (*MsgUpdateScriptResponse, error)
	// ExecScript executes a script by calling a function with arguments.
	ExecScript(ctx context.Context, in *MsgExec, opts ...grpc.CallOption) (*MsgExecResponse, error)
	// Create a new script with new address = hash(creator + content), a new authz
	// updatescript permission will also be created for the creator
	CreateNewScript(ctx context.Context, in *MsgCreateNewScript, opts ...grpc.CallOption) (*MsgCreateNewScriptResponse, error)
	// UpdateParams defines a governance operation for updating the x/script
	// module parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateScript(ctx context.Context, in *MsgUpdateScript, opts ...grpc.CallOption) (*MsgUpdateScriptResponse, error) {
	out := new(MsgUpdateScriptResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Msg/UpdateScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecScript(ctx context.Context, in *MsgExec, opts ...grpc.CallOption) (*MsgExecResponse, error) {
	out := new(MsgExecResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Msg/ExecScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateNewScript(ctx context.Context, in *MsgCreateNewScript, opts ...grpc.CallOption) (*MsgCreateNewScriptResponse, error) {
	out := new(MsgCreateNewScriptResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Msg/CreateNewScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.script.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Update Script updates the script of the given address and increments the
	// the version.
	UpdateScript(context.Context, *MsgUpdateScript) (*MsgUpdateScriptResponse, error)
	// ExecScript executes a script by calling a function with arguments.
	ExecScript(context.Context, *MsgExec) (*MsgExecResponse, error)
	// Create a new script with new address = hash(creator + content), a new authz
	// updatescript permission will also be created for the creator
	CreateNewScript(context.Context, *MsgCreateNewScript) (*MsgCreateNewScriptResponse, error)
	// UpdateParams defines a governance operation for updating the x/script
	// module parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateScript(ctx context.Context, req *MsgUpdateScript) (*MsgUpdateScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScript not implemented")
}
func (*UnimplementedMsgServer) ExecScript(ctx context.Context, req *MsgExec) (*MsgExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecScript not implemented")
}
func (*UnimplementedMsgServer) CreateNewScript(ctx context.Context, req *MsgCreateNewScript) (*MsgCreateNewScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewScript not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Msg/UpdateScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateScript(ctx, req.(*MsgUpdateScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Msg/ExecScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecScript(ctx, req.(*MsgExec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateNewScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNewScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNewScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Msg/CreateNewScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNewScript(ctx, req.(*MsgCreateNewScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.script.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dysonprotocol.script.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateScript",
			Handler:    _Msg_UpdateScript_Handler,
		},
		{
			MethodName: "ExecScript",
			Handler:    _Msg_ExecScript_Handler,
		},
		{
			MethodName: "CreateNewScript",
			Handler:    _Msg_CreateNewScript_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dysonprotocol/script/v1/tx.proto",
}

func (m *MsgUpdateScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgExec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttachedMessages) > 0 {
		for iNdEx := len(m.AttachedMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttachedMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Kwargs) > 0 {
		i -= len(m.Kwargs)
		copy(dAtA[i:], m.Kwargs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kwargs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FunctionName) > 0 {
		i -= len(m.FunctionName)
		copy(dAtA[i:], m.FunctionName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FunctionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExtraCode) > 0 {
		i -= len(m.ExtraCode)
		copy(dAtA[i:], m.ExtraCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExtraCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScriptAddress) > 0 {
		i -= len(m.ScriptAddress)
		copy(dAtA[i:], m.ScriptAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScriptAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttachedMessageResults) > 0 {
		for iNdEx := len(m.AttachedMessageResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttachedMessageResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateNewScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNewScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNewScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateNewScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNewScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNewScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ScriptAddress) > 0 {
		i -= len(m.ScriptAddress)
		copy(dAtA[i:], m.ScriptAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScriptAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgArbitraryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitraryData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitraryData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppDomain) > 0 {
		i -= len(m.AppDomain)
		copy(dAtA[i:], m.AppDomain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AppDomain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitraryDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitraryDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitraryDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTx(uint64(m.Version))
	}
	return n
}

func (m *MsgExec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ScriptAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExtraCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kwargs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AttachedMessages) > 0 {
		for _, e := range m.AttachedMessages {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgExecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AttachedMessageResults) > 0 {
		for _, e := range m.AttachedMessageResults {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateNewScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateNewScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScriptAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTx(uint64(m.Version))
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgArbitraryData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AppDomain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitraryDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kwargs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kwargs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachedMessages = append(m.AttachedMessages, &any.Any{})
			if err := m.AttachedMessages[len(m.AttachedMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachedMessageResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachedMessageResults = append(m.AttachedMessageResults, &any.Any{})
			if err := m.AttachedMessageResults[len(m.AttachedMessageResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNewScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNewScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNewScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNewScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNewScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNewScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitraryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitraryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitraryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitraryDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitraryDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitraryDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
