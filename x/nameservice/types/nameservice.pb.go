// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dysonprotocol/nameservice/v1/nameservice.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Commitment represents a commitment to register a name
type Commitment struct {
	Hexhash   string     `protobuf:"bytes,1,opt,name=hexhash,proto3" json:"hexhash,omitempty"`
	Data      []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Owner     string     `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Timestamp time.Time  `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Valuation types.Coin `protobuf:"bytes,5,opt,name=valuation,proto3" json:"valuation"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_43836be5a8f0c81f, []int{0}
}
func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(m, src)
}
func (m *Commitment) XXX_Size() int {
	return m.Size()
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

func (m *Commitment) GetHexhash() string {
	if m != nil {
		return m.Hexhash
	}
	return ""
}

func (m *Commitment) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Commitment) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Commitment) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *Commitment) GetValuation() types.Coin {
	if m != nil {
		return m.Valuation
	}
	return types.Coin{}
}

// NFTClassData represents metadata for an NFT class
type NFTClassData struct {
	AlwaysListed bool   `protobuf:"varint,1,opt,name=always_listed,json=alwaysListed,proto3" json:"always_listed,omitempty"`
	AnnualPct    string `protobuf:"bytes,2,opt,name=annual_pct,json=annualPct,proto3" json:"annual_pct,omitempty"`
	ExtraData    string `protobuf:"bytes,3,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *NFTClassData) Reset()         { *m = NFTClassData{} }
func (m *NFTClassData) String() string { return proto.CompactTextString(m) }
func (*NFTClassData) ProtoMessage()    {}
func (*NFTClassData) Descriptor() ([]byte, []int) {
	return fileDescriptor_43836be5a8f0c81f, []int{1}
}
func (m *NFTClassData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTClassData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTClassData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTClassData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTClassData.Merge(m, src)
}
func (m *NFTClassData) XXX_Size() int {
	return m.Size()
}
func (m *NFTClassData) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTClassData.DiscardUnknown(m)
}

var xxx_messageInfo_NFTClassData proto.InternalMessageInfo

func (m *NFTClassData) GetAlwaysListed() bool {
	if m != nil {
		return m.AlwaysListed
	}
	return false
}

func (m *NFTClassData) GetAnnualPct() string {
	if m != nil {
		return m.AnnualPct
	}
	return ""
}

func (m *NFTClassData) GetExtraData() string {
	if m != nil {
		return m.ExtraData
	}
	return ""
}

// NFTData represents metadata for an individual NFT
type NFTData struct {
	Listed          bool       `protobuf:"varint,1,opt,name=listed,proto3" json:"listed,omitempty"`
	Valuation       types.Coin `protobuf:"bytes,2,opt,name=valuation,proto3" json:"valuation"`
	ValuationExpiry time.Time  `protobuf:"bytes,3,opt,name=valuation_expiry,json=valuationExpiry,proto3,stdtime" json:"valuation_expiry"`
	// Bid information
	CurrentBidder string     `protobuf:"bytes,4,opt,name=current_bidder,json=currentBidder,proto3" json:"current_bidder,omitempty"`
	CurrentBid    types.Coin `protobuf:"bytes,5,opt,name=current_bid,json=currentBid,proto3" json:"current_bid"`
	BidTimestamp  *time.Time `protobuf:"bytes,6,opt,name=bid_timestamp,json=bidTimestamp,proto3,stdtime" json:"bid_timestamp,omitempty"`
	// Additional metadata
	Metadata string `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *NFTData) Reset()         { *m = NFTData{} }
func (m *NFTData) String() string { return proto.CompactTextString(m) }
func (*NFTData) ProtoMessage()    {}
func (*NFTData) Descriptor() ([]byte, []int) {
	return fileDescriptor_43836be5a8f0c81f, []int{2}
}
func (m *NFTData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTData.Merge(m, src)
}
func (m *NFTData) XXX_Size() int {
	return m.Size()
}
func (m *NFTData) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTData.DiscardUnknown(m)
}

var xxx_messageInfo_NFTData proto.InternalMessageInfo

func (m *NFTData) GetListed() bool {
	if m != nil {
		return m.Listed
	}
	return false
}

func (m *NFTData) GetValuation() types.Coin {
	if m != nil {
		return m.Valuation
	}
	return types.Coin{}
}

func (m *NFTData) GetValuationExpiry() time.Time {
	if m != nil {
		return m.ValuationExpiry
	}
	return time.Time{}
}

func (m *NFTData) GetCurrentBidder() string {
	if m != nil {
		return m.CurrentBidder
	}
	return ""
}

func (m *NFTData) GetCurrentBid() types.Coin {
	if m != nil {
		return m.CurrentBid
	}
	return types.Coin{}
}

func (m *NFTData) GetBidTimestamp() *time.Time {
	if m != nil {
		return m.BidTimestamp
	}
	return nil
}

func (m *NFTData) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func init() {
	proto.RegisterType((*Commitment)(nil), "dysonprotocol.nameservice.v1.Commitment")
	proto.RegisterType((*NFTClassData)(nil), "dysonprotocol.nameservice.v1.NFTClassData")
	proto.RegisterType((*NFTData)(nil), "dysonprotocol.nameservice.v1.NFTData")
}

func init() {
	proto.RegisterFile("dysonprotocol/nameservice/v1/nameservice.proto", fileDescriptor_43836be5a8f0c81f)
}

var fileDescriptor_43836be5a8f0c81f = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x8d, 0xf3, 0x4b, 0xd3, 0x78, 0x9a, 0xfc, 0x40, 0xab, 0x0a, 0xb9, 0x11, 0x38, 0x51, 0x50,
	0xa5, 0x9c, 0x6c, 0x05, 0xce, 0x08, 0x94, 0xd0, 0x9e, 0x50, 0x41, 0x56, 0x4e, 0x5c, 0xac, 0xb5,
	0xbd, 0x24, 0x2b, 0xd9, 0xbb, 0xc1, 0xbb, 0x49, 0x93, 0x6f, 0xd1, 0x8f, 0xd5, 0x63, 0x25, 0x2e,
	0x9c, 0x00, 0x25, 0x9f, 0x03, 0x09, 0x79, 0xd6, 0xf9, 0x77, 0xa2, 0xdc, 0xf6, 0x3d, 0xbf, 0x37,
	0xfb, 0x66, 0xc6, 0x0b, 0x5e, 0xb2, 0x52, 0x52, 0xcc, 0x72, 0xa9, 0x65, 0x2c, 0x53, 0x5f, 0xd0,
	0x8c, 0x29, 0x96, 0x2f, 0x78, 0xcc, 0xfc, 0xc5, 0xe0, 0x10, 0x7a, 0xa8, 0x21, 0xcf, 0x8f, 0xf4,
	0xde, 0xa1, 0x60, 0x31, 0x68, 0xbb, 0xb1, 0x54, 0x99, 0x54, 0x7e, 0x44, 0x55, 0xe1, 0x8f, 0x98,
	0xa6, 0x03, 0x3f, 0x96, 0x5c, 0x18, 0x77, 0xfb, 0x7c, 0x22, 0x27, 0x12, 0x8f, 0x7e, 0x71, 0x2a,
	0xd9, 0xce, 0x44, 0xca, 0x49, 0xca, 0x7c, 0x44, 0xd1, 0xfc, 0x8b, 0xaf, 0x79, 0xc6, 0x94, 0xa6,
	0xd9, 0xac, 0x14, 0x5c, 0x98, 0xb2, 0xa1, 0x71, 0x1a, 0x60, 0x3e, 0xf5, 0xbe, 0x59, 0x00, 0x23,
	0x99, 0x65, 0x5c, 0x67, 0x4c, 0x68, 0xe2, 0xc0, 0xe9, 0x94, 0x2d, 0xa7, 0x54, 0x4d, 0x1d, 0xab,
	0x6b, 0xf5, 0xed, 0x60, 0x0b, 0x09, 0x81, 0x5a, 0x42, 0x35, 0x75, 0xaa, 0x5d, 0xab, 0xdf, 0x0c,
	0xf0, 0x4c, 0xce, 0xe1, 0x44, 0xde, 0x0a, 0x96, 0x3b, 0xff, 0xa1, 0xd6, 0x00, 0x32, 0x04, 0x7b,
	0x17, 0xc0, 0xa9, 0x75, 0xad, 0xfe, 0xd9, 0xab, 0xb6, 0x67, 0x22, 0x7a, 0xdb, 0x88, 0xde, 0x78,
	0xab, 0x18, 0x36, 0xee, 0x7f, 0x74, 0x2a, 0x77, 0x3f, 0x3b, 0x56, 0xb0, 0xb7, 0x91, 0x37, 0x60,
	0x2f, 0x68, 0x3a, 0xa7, 0x9a, 0x4b, 0xe1, 0x9c, 0x60, 0x8d, 0x0b, 0xaf, 0x0c, 0x5e, 0x0c, 0xc7,
	0x2b, 0x87, 0xe3, 0x8d, 0x24, 0x17, 0xc3, 0x5a, 0x51, 0x22, 0xd8, 0x3b, 0x7a, 0x5f, 0xa1, 0x79,
	0x73, 0x3d, 0x1e, 0xa5, 0x54, 0xa9, 0xf7, 0x45, 0xd0, 0x97, 0xd0, 0xa2, 0xe9, 0x2d, 0x5d, 0xa9,
	0x30, 0xe5, 0x4a, 0xb3, 0x04, 0x9b, 0x6b, 0x04, 0x4d, 0x43, 0x7e, 0x40, 0x8e, 0xbc, 0x00, 0xa0,
	0x42, 0xcc, 0x69, 0x1a, 0xce, 0x62, 0x8d, 0x7d, 0xda, 0x81, 0x6d, 0x98, 0x4f, 0xb1, 0x2e, 0x3e,
	0xb3, 0xa5, 0xce, 0x69, 0x88, 0x63, 0x30, 0x1d, 0xdb, 0xc8, 0x14, 0x57, 0xf4, 0x7e, 0x57, 0xe1,
	0xf4, 0xe6, 0x7a, 0x8c, 0xd7, 0x3d, 0x83, 0xfa, 0xd1, 0x3d, 0x25, 0x3a, 0xee, 0xaa, 0xfa, 0xaf,
	0x5d, 0x91, 0x8f, 0xf0, 0x74, 0x07, 0x42, 0xb6, 0x9c, 0xf1, 0x7c, 0x85, 0x39, 0x1e, 0x3b, 0xdf,
	0x27, 0x3b, 0xf7, 0x15, 0x9a, 0xc9, 0x25, 0xfc, 0x1f, 0xcf, 0xf3, 0x9c, 0x09, 0x1d, 0x46, 0x3c,
	0x49, 0x58, 0x8e, 0xeb, 0xb2, 0x83, 0x56, 0xc9, 0x0e, 0x91, 0x24, 0xef, 0xe0, 0xec, 0x40, 0xf6,
	0xd8, 0x75, 0xc0, 0xbe, 0x08, 0xb9, 0x82, 0x56, 0xc4, 0x93, 0x70, 0xff, 0x5b, 0xd4, 0xff, 0x1a,
	0xbb, 0x86, 0x91, 0x9b, 0x11, 0x4f, 0x76, 0x1c, 0x69, 0x43, 0x23, 0x63, 0x9a, 0xe2, 0x02, 0x1a,
	0x98, 0x74, 0x87, 0x87, 0x6f, 0xef, 0xd7, 0xae, 0xf5, 0xb0, 0x76, 0xad, 0x5f, 0x6b, 0xd7, 0xba,
	0xdb, 0xb8, 0x95, 0x87, 0x8d, 0x5b, 0xf9, 0xbe, 0x71, 0x2b, 0x9f, 0x2f, 0x8f, 0x9f, 0x5c, 0x2c,
	0x33, 0x7f, 0x79, 0xf4, 0x50, 0xf5, 0x6a, 0xc6, 0x54, 0x54, 0x47, 0xc5, 0xeb, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xc3, 0xd0, 0xd5, 0xb3, 0xd2, 0x03, 0x00, 0x00,
}

func (m *Commitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Valuation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNameservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintNameservice(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNameservice(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNameservice(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hexhash) > 0 {
		i -= len(m.Hexhash)
		copy(dAtA[i:], m.Hexhash)
		i = encodeVarintNameservice(dAtA, i, uint64(len(m.Hexhash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NFTClassData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTClassData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTClassData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintNameservice(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AnnualPct) > 0 {
		i -= len(m.AnnualPct)
		copy(dAtA[i:], m.AnnualPct)
		i = encodeVarintNameservice(dAtA, i, uint64(len(m.AnnualPct)))
		i--
		dAtA[i] = 0x12
	}
	if m.AlwaysListed {
		i--
		if m.AlwaysListed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NFTData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintNameservice(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x42
	}
	if m.BidTimestamp != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.BidTimestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BidTimestamp):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintNameservice(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.CurrentBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNameservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.CurrentBidder) > 0 {
		i -= len(m.CurrentBidder)
		copy(dAtA[i:], m.CurrentBidder)
		i = encodeVarintNameservice(dAtA, i, uint64(len(m.CurrentBidder)))
		i--
		dAtA[i] = 0x22
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ValuationExpiry, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ValuationExpiry):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintNameservice(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Valuation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNameservice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Listed {
		i--
		if m.Listed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNameservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovNameservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Commitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hexhash)
	if l > 0 {
		n += 1 + l + sovNameservice(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNameservice(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNameservice(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovNameservice(uint64(l))
	l = m.Valuation.Size()
	n += 1 + l + sovNameservice(uint64(l))
	return n
}

func (m *NFTClassData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysListed {
		n += 2
	}
	l = len(m.AnnualPct)
	if l > 0 {
		n += 1 + l + sovNameservice(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovNameservice(uint64(l))
	}
	return n
}

func (m *NFTData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listed {
		n += 2
	}
	l = m.Valuation.Size()
	n += 1 + l + sovNameservice(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ValuationExpiry)
	n += 1 + l + sovNameservice(uint64(l))
	l = len(m.CurrentBidder)
	if l > 0 {
		n += 1 + l + sovNameservice(uint64(l))
	}
	l = m.CurrentBid.Size()
	n += 1 + l + sovNameservice(uint64(l))
	if m.BidTimestamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BidTimestamp)
		n += 1 + l + sovNameservice(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovNameservice(uint64(l))
	}
	return n
}

func sovNameservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNameservice(x uint64) (n int) {
	return sovNameservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Commitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hexhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hexhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valuation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Valuation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFTClassData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTClassData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTClassData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysListed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlwaysListed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualPct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnualPct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFTData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Listed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valuation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Valuation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuationExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ValuationExpiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidTimestamp == nil {
				m.BidTimestamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.BidTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNameservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNameservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNameservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNameservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNameservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNameservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNameservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNameservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNameservice = fmt.Errorf("proto: unexpected end of group")
)
