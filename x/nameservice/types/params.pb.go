// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dysonprotocol/nameservice/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the nameservice module.
type Params struct {
	// bid_timeout defines the duration after which a bid can be claimed by the
	// bidder
	BidTimeout time.Duration `protobuf:"bytes,1,opt,name=bid_timeout,json=bidTimeout,proto3,stdduration" json:"bid_timeout" yaml:"bid_timeout"`
	// allowed_denoms defines the denominations that are allowed to be used for
	// valuations and bids
	AllowedDenoms []string `protobuf:"bytes,2,rep,name=allowed_denoms,json=allowedDenoms,proto3" json:"allowed_denoms,omitempty" yaml:"allowed_denoms"`
	// reject_bid_valuation_fee_percent defines the percentage of the new
	// valuation to charge as a fee when rejecting a bid
	RejectBidValuationFeePercent string `protobuf:"bytes,4,opt,name=reject_bid_valuation_fee_percent,json=rejectBidValuationFeePercent,proto3" json:"reject_bid_valuation_fee_percent,omitempty" yaml:"reject_bid_valuation_fee_percent"`
	// minimum_bid_percent_increase defines the minimum percentage increase
	// required for a new bid compared to the previous bid
	MinimumBidPercentIncrease string `protobuf:"bytes,5,opt,name=minimum_bid_percent_increase,json=minimumBidPercentIncrease,proto3" json:"minimum_bid_percent_increase,omitempty" yaml:"minimum_bid_percent_increase"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_62c7384e3f0b6965, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBidTimeout() time.Duration {
	if m != nil {
		return m.BidTimeout
	}
	return 0
}

func (m *Params) GetAllowedDenoms() []string {
	if m != nil {
		return m.AllowedDenoms
	}
	return nil
}

func (m *Params) GetRejectBidValuationFeePercent() string {
	if m != nil {
		return m.RejectBidValuationFeePercent
	}
	return ""
}

func (m *Params) GetMinimumBidPercentIncrease() string {
	if m != nil {
		return m.MinimumBidPercentIncrease
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "dysonprotocol.nameservice.v1.Params")
}

func init() {
	proto.RegisterFile("dysonprotocol/nameservice/v1/params.proto", fileDescriptor_62c7384e3f0b6965)
}

var fileDescriptor_62c7384e3f0b6965 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xb1, 0x8a, 0xd4, 0x40,
	0x18, 0xc7, 0x77, 0x3c, 0x3d, 0xb8, 0x39, 0xb4, 0x08, 0x0a, 0x9b, 0x63, 0x99, 0x84, 0x88, 0xb8,
	0x16, 0x26, 0x9c, 0x62, 0xa1, 0x8d, 0x12, 0x16, 0xc1, 0xee, 0x58, 0xc4, 0xe2, 0x9a, 0x30, 0x99,
	0xf9, 0x2e, 0x8c, 0x64, 0x32, 0x21, 0x93, 0x44, 0xb7, 0xf4, 0x0d, 0x2c, 0xad, 0x7d, 0x06, 0x1f,
	0xe2, 0xca, 0xc3, 0xca, 0x2a, 0xca, 0xee, 0x1b, 0xe4, 0x09, 0xe4, 0x66, 0xe6, 0xe0, 0x62, 0xe1,
	0x75, 0xf9, 0xbe, 0xff, 0xef, 0xff, 0xff, 0x87, 0xe1, 0xc3, 0x4f, 0xf8, 0x46, 0xab, 0xaa, 0x6e,
	0x54, 0xab, 0x98, 0x2a, 0x93, 0x8a, 0x4a, 0xd0, 0xd0, 0xf4, 0x82, 0x41, 0xd2, 0x1f, 0x27, 0x35,
	0x6d, 0xa8, 0xd4, 0xb1, 0x91, 0xbd, 0xc5, 0x04, 0x8d, 0xaf, 0xa1, 0x71, 0x7f, 0x7c, 0x74, 0xbf,
	0x50, 0x85, 0x32, 0x62, 0x72, 0xf9, 0x65, 0x3d, 0x47, 0xa4, 0x50, 0xaa, 0x28, 0x21, 0x31, 0x53,
	0xde, 0x9d, 0x25, 0xbc, 0x6b, 0x68, 0x2b, 0x54, 0xe5, 0x74, 0x9f, 0x29, 0x2d, 0x95, 0xce, 0xac,
	0xd1, 0x0e, 0x56, 0x8a, 0xbe, 0xef, 0xe1, 0xfd, 0x13, 0xd3, 0xef, 0x9d, 0xe2, 0xc3, 0x5c, 0xf0,
	0xac, 0x15, 0x12, 0x54, 0xd7, 0xce, 0x51, 0x88, 0x96, 0x87, 0xcf, 0xfc, 0xd8, 0x66, 0xc7, 0x57,
	0xd9, 0xf1, 0xca, 0x65, 0xa7, 0xe4, 0x7c, 0x08, 0x66, 0xe3, 0x10, 0x78, 0x1b, 0x2a, 0xcb, 0x57,
	0xd1, 0x35, 0x6f, 0xf4, 0xed, 0x77, 0x80, 0xd6, 0x38, 0x17, 0xfc, 0xbd, 0x5d, 0x78, 0x6f, 0xf0,
	0x3d, 0x5a, 0x96, 0xea, 0x13, 0xf0, 0x8c, 0x43, 0xa5, 0xa4, 0x9e, 0xdf, 0x0a, 0xf7, 0x96, 0x07,
	0xa9, 0x3f, 0x0e, 0xc1, 0x03, 0xeb, 0x9f, 0xea, 0xd1, 0xfa, 0xae, 0x5b, 0xac, 0xcc, 0xec, 0x7d,
	0x41, 0x38, 0x6c, 0xe0, 0x23, 0xb0, 0x36, 0xbb, 0x6c, 0xea, 0x69, 0xd9, 0x99, 0xdf, 0xc8, 0xce,
	0x00, 0xb2, 0x1a, 0x1a, 0x06, 0x55, 0x3b, 0xbf, 0x1d, 0xa2, 0xe5, 0x41, 0xfa, 0x72, 0x1c, 0x82,
	0xc7, 0x36, 0xf4, 0x26, 0x47, 0xf4, 0xf3, 0xc7, 0x53, 0xec, 0x1e, 0x64, 0x05, 0x6c, 0xbd, 0xb0,
	0x86, 0x54, 0xf0, 0x0f, 0x57, 0xf8, 0x5b, 0x80, 0x13, 0x0b, 0x7b, 0x3d, 0x5e, 0x48, 0x51, 0x09,
	0xd9, 0x49, 0x93, 0xe8, 0x32, 0x32, 0x51, 0xb1, 0x06, 0xa8, 0x86, 0xf9, 0x1d, 0x53, 0xff, 0x62,
	0x1c, 0x82, 0x87, 0xb6, 0xfe, 0x7f, 0xf4, 0xbf, 0xd5, 0xbe, 0x83, 0x53, 0xc1, 0x5d, 0xdf, 0x3b,
	0x47, 0xa6, 0xaf, 0xcf, 0xb7, 0x04, 0x5d, 0x6c, 0x09, 0xfa, 0xb3, 0x25, 0xe8, 0xeb, 0x8e, 0xcc,
	0x2e, 0x76, 0x64, 0xf6, 0x6b, 0x47, 0x66, 0xa7, 0x8f, 0xa6, 0xd7, 0xc2, 0x94, 0x4c, 0x3e, 0x4f,
	0xce, 0xab, 0xdd, 0xd4, 0xa0, 0xf3, 0x7d, 0x43, 0x3c, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb2,
	0x81, 0x2b, 0x4f, 0x88, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinimumBidPercentIncrease) > 0 {
		i -= len(m.MinimumBidPercentIncrease)
		copy(dAtA[i:], m.MinimumBidPercentIncrease)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MinimumBidPercentIncrease)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RejectBidValuationFeePercent) > 0 {
		i -= len(m.RejectBidValuationFeePercent)
		copy(dAtA[i:], m.RejectBidValuationFeePercent)
		i = encodeVarintParams(dAtA, i, uint64(len(m.RejectBidValuationFeePercent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AllowedDenoms) > 0 {
		for iNdEx := len(m.AllowedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedDenoms[iNdEx])
			copy(dAtA[i:], m.AllowedDenoms[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AllowedDenoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.BidTimeout, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.BidTimeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.BidTimeout)
	n += 1 + l + sovParams(uint64(l))
	if len(m.AllowedDenoms) > 0 {
		for _, s := range m.AllowedDenoms {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = len(m.RejectBidValuationFeePercent)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MinimumBidPercentIncrease)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.BidTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDenoms = append(m.AllowedDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectBidValuationFeePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectBidValuationFeePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBidPercentIncrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumBidPercentIncrease = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
