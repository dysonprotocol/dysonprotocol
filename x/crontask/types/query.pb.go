// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dysonprotocol/crontask/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTaskByIDRequest is the request type for the Query/TaskByID RPC method
type QueryTaskByIDRequest struct {
	TaskId uint64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *QueryTaskByIDRequest) Reset()         { *m = QueryTaskByIDRequest{} }
func (m *QueryTaskByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaskByIDRequest) ProtoMessage()    {}
func (*QueryTaskByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{0}
}
func (m *QueryTaskByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaskByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaskByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaskByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaskByIDRequest.Merge(m, src)
}
func (m *QueryTaskByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaskByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaskByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaskByIDRequest proto.InternalMessageInfo

func (m *QueryTaskByIDRequest) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

// QueryTaskByIDResponse is the response type for the Query/TaskByID RPC method
type QueryTaskByIDResponse struct {
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *QueryTaskByIDResponse) Reset()         { *m = QueryTaskByIDResponse{} }
func (m *QueryTaskByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaskByIDResponse) ProtoMessage()    {}
func (*QueryTaskByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{1}
}
func (m *QueryTaskByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaskByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaskByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaskByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaskByIDResponse.Merge(m, src)
}
func (m *QueryTaskByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaskByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaskByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaskByIDResponse proto.InternalMessageInfo

func (m *QueryTaskByIDResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

// QueryTasksByAddressRequest is the request type for the Query/TasksByAddress
// RPC method
type QueryTasksByAddressRequest struct {
	Creator    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTasksByAddressRequest) Reset()         { *m = QueryTasksByAddressRequest{} }
func (m *QueryTasksByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTasksByAddressRequest) ProtoMessage()    {}
func (*QueryTasksByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{2}
}
func (m *QueryTasksByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTasksByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTasksByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTasksByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTasksByAddressRequest.Merge(m, src)
}
func (m *QueryTasksByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTasksByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTasksByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTasksByAddressRequest proto.InternalMessageInfo

func (m *QueryTasksByAddressRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryTasksByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTasksByStatusTimestampRequest is the request type for the
// Query/TasksByStatusTimestamp RPC method
type QueryTasksByStatusTimestampRequest struct {
	Status     string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Ascending  bool               `protobuf:"varint,2,opt,name=ascending,proto3" json:"ascending,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTasksByStatusTimestampRequest) Reset()         { *m = QueryTasksByStatusTimestampRequest{} }
func (m *QueryTasksByStatusTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTasksByStatusTimestampRequest) ProtoMessage()    {}
func (*QueryTasksByStatusTimestampRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{3}
}
func (m *QueryTasksByStatusTimestampRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTasksByStatusTimestampRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTasksByStatusTimestampRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTasksByStatusTimestampRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTasksByStatusTimestampRequest.Merge(m, src)
}
func (m *QueryTasksByStatusTimestampRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTasksByStatusTimestampRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTasksByStatusTimestampRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTasksByStatusTimestampRequest proto.InternalMessageInfo

func (m *QueryTasksByStatusTimestampRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryTasksByStatusTimestampRequest) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

func (m *QueryTasksByStatusTimestampRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTasksByStatusGasPriceRequest is the request type for the
// Query/TasksByStatusGasPrice RPC method
type QueryTasksByStatusGasPriceRequest struct {
	Status     string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Ascending  bool               `protobuf:"varint,2,opt,name=ascending,proto3" json:"ascending,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTasksByStatusGasPriceRequest) Reset()         { *m = QueryTasksByStatusGasPriceRequest{} }
func (m *QueryTasksByStatusGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTasksByStatusGasPriceRequest) ProtoMessage()    {}
func (*QueryTasksByStatusGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{4}
}
func (m *QueryTasksByStatusGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTasksByStatusGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTasksByStatusGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTasksByStatusGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTasksByStatusGasPriceRequest.Merge(m, src)
}
func (m *QueryTasksByStatusGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTasksByStatusGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTasksByStatusGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTasksByStatusGasPriceRequest proto.InternalMessageInfo

func (m *QueryTasksByStatusGasPriceRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryTasksByStatusGasPriceRequest) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

func (m *QueryTasksByStatusGasPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTasksResponse is the response type for task queries with multiple
// results
type QueryTasksResponse struct {
	Tasks      []*Task             `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTasksResponse) Reset()         { *m = QueryTasksResponse{} }
func (m *QueryTasksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTasksResponse) ProtoMessage()    {}
func (*QueryTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{5}
}
func (m *QueryTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTasksResponse.Merge(m, src)
}
func (m *QueryTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTasksResponse proto.InternalMessageInfo

func (m *QueryTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *QueryTasksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d3eefc3a09d7ff, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTaskByIDRequest)(nil), "dysonprotocol.crontask.v1.QueryTaskByIDRequest")
	proto.RegisterType((*QueryTaskByIDResponse)(nil), "dysonprotocol.crontask.v1.QueryTaskByIDResponse")
	proto.RegisterType((*QueryTasksByAddressRequest)(nil), "dysonprotocol.crontask.v1.QueryTasksByAddressRequest")
	proto.RegisterType((*QueryTasksByStatusTimestampRequest)(nil), "dysonprotocol.crontask.v1.QueryTasksByStatusTimestampRequest")
	proto.RegisterType((*QueryTasksByStatusGasPriceRequest)(nil), "dysonprotocol.crontask.v1.QueryTasksByStatusGasPriceRequest")
	proto.RegisterType((*QueryTasksResponse)(nil), "dysonprotocol.crontask.v1.QueryTasksResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "dysonprotocol.crontask.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dysonprotocol.crontask.v1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("dysonprotocol/crontask/v1/query.proto", fileDescriptor_31d3eefc3a09d7ff)
}

var fileDescriptor_31d3eefc3a09d7ff = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4f, 0x4f, 0xd4, 0x40,
	0x18, 0xc6, 0x19, 0xfe, 0x2c, 0x30, 0x26, 0x1e, 0x46, 0x40, 0x68, 0x48, 0x95, 0x1a, 0x15, 0x89,
	0x74, 0xd8, 0x22, 0x51, 0x0c, 0xc6, 0xb8, 0x31, 0x12, 0x12, 0x0f, 0x6b, 0xe1, 0xe4, 0x85, 0xcc,
	0xb6, 0x93, 0xa6, 0x81, 0xed, 0x94, 0xce, 0x40, 0x6c, 0x08, 0x89, 0xf1, 0x13, 0x18, 0xf5, 0xe0,
	0x15, 0x3f, 0x82, 0xf1, 0x03, 0x78, 0x31, 0xf1, 0x48, 0xf4, 0xe2, 0xd1, 0x80, 0x1f, 0xc4, 0x74,
	0x66, 0xba, 0xcb, 0x2e, 0x0b, 0xdb, 0xf5, 0xe4, 0x09, 0x66, 0xe6, 0x79, 0xde, 0xf9, 0xbd, 0x6f,
	0xe7, 0x59, 0x78, 0xd3, 0x4f, 0x39, 0x8b, 0xe2, 0x84, 0x09, 0xe6, 0xb1, 0x6d, 0xec, 0x25, 0x2c,
	0x12, 0x84, 0x6f, 0xe1, 0xbd, 0x32, 0xde, 0xd9, 0xa5, 0x49, 0x6a, 0xcb, 0x23, 0x34, 0xd5, 0x22,
	0xb3, 0x73, 0x99, 0xbd, 0x57, 0x36, 0xa6, 0x03, 0xc6, 0x82, 0x6d, 0x8a, 0x49, 0x1c, 0x62, 0x12,
	0x45, 0x4c, 0x10, 0x11, 0xb2, 0x88, 0x2b, 0xa3, 0x31, 0xe7, 0x31, 0x5e, 0x67, 0x1c, 0xd7, 0x08,
	0xa7, 0xaa, 0x22, 0xde, 0x2b, 0xd7, 0xa8, 0x20, 0x65, 0x1c, 0x93, 0x20, 0x8c, 0xa4, 0x58, 0x6b,
	0xa7, 0x94, 0x76, 0x53, 0xae, 0xb0, 0x5a, 0xe8, 0x23, 0xf3, 0x74, 0x99, 0xbc, 0x80, 0xc7, 0xc2,
	0xdc, 0x3a, 0x7b, 0x7e, 0x1b, 0x0d, 0x56, 0x79, 0x6a, 0x61, 0x38, 0xf6, 0x22, 0xc3, 0xd8, 0x20,
	0x7c, 0xab, 0x92, 0xae, 0x3d, 0x75, 0xe9, 0xce, 0x2e, 0xe5, 0x02, 0x5d, 0x85, 0xc3, 0x99, 0x6a,
	0x33, 0xf4, 0x27, 0xc1, 0x75, 0x30, 0x3b, 0xe8, 0x96, 0xb2, 0xe5, 0x9a, 0x6f, 0x3d, 0x87, 0xe3,
	0x6d, 0x06, 0x1e, 0xb3, 0x88, 0x53, 0xb4, 0x08, 0x07, 0x33, 0x89, 0x94, 0x5f, 0x72, 0xae, 0xd9,
	0xe7, 0x8e, 0xc8, 0xce, 0xac, 0xae, 0x14, 0x5b, 0x1f, 0x01, 0x34, 0x1a, 0xe5, 0x78, 0x25, 0x7d,
	0xe2, 0xfb, 0x09, 0xe5, 0x3c, 0xa7, 0x70, 0xe0, 0xb0, 0x97, 0x50, 0x22, 0x58, 0x22, 0xcb, 0x8e,
	0x56, 0x26, 0x7f, 0x7c, 0x99, 0x1f, 0xd3, 0xa3, 0xd0, 0xda, 0x75, 0x91, 0x84, 0x51, 0xe0, 0xe6,
	0x42, 0xf4, 0x0c, 0xc2, 0xe6, 0x28, 0x27, 0xfb, 0x25, 0xcd, 0x2d, 0x5b, 0x7b, 0xb2, 0x81, 0xd9,
	0xea, 0x4b, 0xea, 0xb1, 0xd9, 0x55, 0x12, 0x50, 0x7d, 0x9f, 0x7b, 0xca, 0x69, 0x7d, 0x02, 0xd0,
	0x3a, 0x8d, 0xb6, 0x2e, 0x88, 0xd8, 0xe5, 0x1b, 0x61, 0x9d, 0x72, 0x41, 0xea, 0x71, 0x8e, 0x38,
	0x01, 0x4b, 0x5c, 0x9e, 0x28, 0x42, 0x57, 0xaf, 0xd0, 0x34, 0x1c, 0x25, 0xdc, 0xa3, 0x91, 0x1f,
	0x46, 0x81, 0xa4, 0x18, 0x71, 0x9b, 0x1b, 0x6d, 0x90, 0x03, 0xff, 0x0c, 0x79, 0x08, 0xe0, 0xcc,
	0x59, 0xc8, 0x55, 0xc2, 0xab, 0x49, 0xe8, 0xd1, 0xff, 0x83, 0xf1, 0x03, 0x80, 0xa8, 0xc9, 0xd8,
	0x78, 0x2f, 0x4b, 0x70, 0x28, 0x7b, 0x02, 0x19, 0xd3, 0x40, 0x91, 0x07, 0xa3, 0xd4, 0x68, 0xb5,
	0xc3, 0xe7, 0xbd, 0xdd, 0x95, 0x4a, 0xdd, 0xd9, 0x82, 0x35, 0xa6, 0xa9, 0xaa, 0x24, 0x21, 0xf5,
	0xfc, 0xc5, 0x59, 0x55, 0x78, 0xa5, 0x65, 0x57, 0xc3, 0x2e, 0xc3, 0x52, 0x2c, 0x77, 0xf4, 0xf3,
	0x9e, 0xb9, 0x80, 0x56, 0x5b, 0xb5, 0xc1, 0x79, 0x3d, 0x0c, 0x87, 0x64, 0x49, 0x74, 0x08, 0xe0,
	0x48, 0x1e, 0x1b, 0x84, 0x2f, 0xa8, 0xd0, 0x29, 0x91, 0xc6, 0x42, 0x71, 0x83, 0x82, 0xb6, 0x9c,
	0x37, 0x3f, 0xff, 0xbc, 0xef, 0xbf, 0x8b, 0xe6, 0xf0, 0xf9, 0x3f, 0x07, 0x72, 0xa8, 0x78, 0x5f,
	0x67, 0xfd, 0x00, 0x7d, 0x06, 0xf0, 0x72, 0x6b, 0x16, 0xd1, 0x52, 0x91, 0x8b, 0xcf, 0x64, 0xd7,
	0x98, 0x2f, 0x64, 0x6b, 0xc0, 0x3e, 0x94, 0xb0, 0xf7, 0x90, 0xd3, 0x15, 0x56, 0x07, 0x1d, 0xef,
	0xeb, 0x7f, 0x0e, 0xd0, 0x57, 0x00, 0x27, 0x3a, 0xa7, 0x14, 0x3d, 0x2a, 0x08, 0xdf, 0x39, 0xdd,
	0xbd, 0x36, 0xf1, 0x40, 0x36, 0xe1, 0xa0, 0x85, 0xae, 0x4d, 0xa8, 0x04, 0xe2, 0x7d, 0xf5, 0xf7,
	0x00, 0x7d, 0x03, 0x70, 0xbc, 0x63, 0x86, 0xd1, 0x4a, 0x4f, 0x1d, 0xb4, 0x45, 0xbf, 0xd7, 0x06,
	0x1e, 0xcb, 0x06, 0x96, 0xd1, 0xfd, 0x5e, 0x1b, 0xc0, 0xb5, 0x74, 0x33, 0x20, 0x1c, 0xbd, 0x03,
	0xb0, 0xa4, 0x02, 0x80, 0xba, 0x5e, 0xdd, 0x92, 0x3c, 0xc3, 0x2e, 0x2a, 0xd7, 0xa8, 0x77, 0x24,
	0xea, 0x0d, 0x34, 0x73, 0x01, 0xaa, 0x8a, 0x60, 0x65, 0xe5, 0xfb, 0xb1, 0x09, 0x8e, 0x8e, 0x4d,
	0xf0, 0xfb, 0xd8, 0x04, 0x6f, 0x4f, 0xcc, 0xbe, 0xa3, 0x13, 0xb3, 0xef, 0xd7, 0x89, 0xd9, 0xf7,
	0xd2, 0x6a, 0xbb, 0x93, 0xd5, 0xf1, 0xab, 0x66, 0x05, 0x91, 0xc6, 0x94, 0xd7, 0x4a, 0xf2, 0x78,
	0xf1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x05, 0xa9, 0xf7, 0x1c, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TaskByID returns a task by its ID
	TaskByID(ctx context.Context, in *QueryTaskByIDRequest, opts ...grpc.CallOption) (*QueryTaskByIDResponse, error)
	// TasksByAddress returns all tasks created by a specific address
	TasksByAddress(ctx context.Context, in *QueryTasksByAddressRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error)
	// TasksByStatusTimestamp returns tasks filtered by status and ordered by
	// timestamp
	TasksByStatusTimestamp(ctx context.Context, in *QueryTasksByStatusTimestampRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error)
	// TasksByStatusGasPrice returns tasks filtered by status and ordered by gas
	// price
	TasksByStatusGasPrice(ctx context.Context, in *QueryTasksByStatusGasPriceRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error)
	// Params returns the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TaskByID(ctx context.Context, in *QueryTaskByIDRequest, opts ...grpc.CallOption) (*QueryTaskByIDResponse, error) {
	out := new(QueryTaskByIDResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.crontask.v1.Query/TaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TasksByAddress(ctx context.Context, in *QueryTasksByAddressRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error) {
	out := new(QueryTasksResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.crontask.v1.Query/TasksByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TasksByStatusTimestamp(ctx context.Context, in *QueryTasksByStatusTimestampRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error) {
	out := new(QueryTasksResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.crontask.v1.Query/TasksByStatusTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TasksByStatusGasPrice(ctx context.Context, in *QueryTasksByStatusGasPriceRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error) {
	out := new(QueryTasksResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.crontask.v1.Query/TasksByStatusGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dysonprotocol.crontask.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TaskByID returns a task by its ID
	TaskByID(context.Context, *QueryTaskByIDRequest) (*QueryTaskByIDResponse, error)
	// TasksByAddress returns all tasks created by a specific address
	TasksByAddress(context.Context, *QueryTasksByAddressRequest) (*QueryTasksResponse, error)
	// TasksByStatusTimestamp returns tasks filtered by status and ordered by
	// timestamp
	TasksByStatusTimestamp(context.Context, *QueryTasksByStatusTimestampRequest) (*QueryTasksResponse, error)
	// TasksByStatusGasPrice returns tasks filtered by status and ordered by gas
	// price
	TasksByStatusGasPrice(context.Context, *QueryTasksByStatusGasPriceRequest) (*QueryTasksResponse, error)
	// Params returns the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TaskByID(ctx context.Context, req *QueryTaskByIDRequest) (*QueryTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskByID not implemented")
}
func (*UnimplementedQueryServer) TasksByAddress(ctx context.Context, req *QueryTasksByAddressRequest) (*QueryTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksByAddress not implemented")
}
func (*UnimplementedQueryServer) TasksByStatusTimestamp(ctx context.Context, req *QueryTasksByStatusTimestampRequest) (*QueryTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksByStatusTimestamp not implemented")
}
func (*UnimplementedQueryServer) TasksByStatusGasPrice(ctx context.Context, req *QueryTasksByStatusGasPriceRequest) (*QueryTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksByStatusGasPrice not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.crontask.v1.Query/TaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TaskByID(ctx, req.(*QueryTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TasksByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTasksByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TasksByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.crontask.v1.Query/TasksByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TasksByAddress(ctx, req.(*QueryTasksByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TasksByStatusTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTasksByStatusTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TasksByStatusTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.crontask.v1.Query/TasksByStatusTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TasksByStatusTimestamp(ctx, req.(*QueryTasksByStatusTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TasksByStatusGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTasksByStatusGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TasksByStatusGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.crontask.v1.Query/TasksByStatusGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TasksByStatusGasPrice(ctx, req.(*QueryTasksByStatusGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dysonprotocol.crontask.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dysonprotocol.crontask.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskByID",
			Handler:    _Query_TaskByID_Handler,
		},
		{
			MethodName: "TasksByAddress",
			Handler:    _Query_TasksByAddress_Handler,
		},
		{
			MethodName: "TasksByStatusTimestamp",
			Handler:    _Query_TasksByStatusTimestamp_Handler,
		},
		{
			MethodName: "TasksByStatusGasPrice",
			Handler:    _Query_TasksByStatusGasPrice_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dysonprotocol/crontask/v1/query.proto",
}

func (m *QueryTaskByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaskByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaskByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTaskByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaskByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaskByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTasksByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTasksByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTasksByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTasksByStatusTimestampRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTasksByStatusTimestampRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTasksByStatusTimestampRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ascending {
		i--
		if m.Ascending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTasksByStatusGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTasksByStatusGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTasksByStatusGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ascending {
		i--
		if m.Ascending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTaskByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovQuery(uint64(m.TaskId))
	}
	return n
}

func (m *QueryTaskByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTasksByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTasksByStatusTimestampRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Ascending {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTasksByStatusGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Ascending {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTaskByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaskByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaskByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaskByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaskByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaskByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTasksByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTasksByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTasksByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTasksByStatusTimestampRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTasksByStatusTimestampRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTasksByStatusTimestampRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ascending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ascending = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTasksByStatusGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTasksByStatusGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTasksByStatusGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ascending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ascending = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
