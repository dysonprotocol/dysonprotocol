diff --git a/Objects/bytesobject.c b/Objects/bytesobject.c
index dae84127a7d..2970331ed42 100644
--- a/Objects/bytesobject.c
+++ b/Objects/bytesobject.c
@@ -329,17 +329,10 @@ PyBytes_FromFormatV(const char *format, va_list vargs)
         }
 
         case 'p':
-            sprintf(buffer, "%p", va_arg(vargs, void*));
-            assert(strlen(buffer) < sizeof(buffer));
-            /* %p is ill-defined:  ensure leading 0x. */
-            if (buffer[1] == 'X')
-                buffer[1] = 'x';
-            else if (buffer[1] != 'x') {
-                memmove(buffer+2, buffer, strlen(buffer)+1);
-                buffer[0] = '0';
-                buffer[1] = 'x';
-            }
-            WRITE_BYTES(buffer);
+            /* Skip the pointer argument */
+            (void) va_arg(vargs, void*);
+            /* Always output 0x1234 instead of the actual pointer */
+            WRITE_BYTES("0x1234");
             break;
 
         case '%':
diff --git a/Objects/capsule.c b/Objects/capsule.c
index baaddb3f1f0..13b9fd0e687 100644
--- a/Objects/capsule.c
+++ b/Objects/capsule.c
@@ -274,8 +274,8 @@ capsule_repr(PyObject *o)
         name = "NULL";
     }
 
-    return PyUnicode_FromFormat("<capsule object %s%s%s at %p>",
-        quote, name, quote, capsule);
+    return PyUnicode_FromFormat("<capsule object %s%s%s at 0x1234>",
+        quote, name, quote);
 }
 
 
diff --git a/Objects/cellobject.c b/Objects/cellobject.c
index f516707f6f8..33af06c3410 100644
--- a/Objects/cellobject.c
+++ b/Objects/cellobject.c
@@ -104,11 +104,10 @@ static PyObject *
 cell_repr(PyCellObject *op)
 {
     if (op->ob_ref == NULL)
-        return PyUnicode_FromFormat("<cell at %p: empty>", op);
+        return PyUnicode_FromFormat("<cell at 0x1234: empty>");
 
-    return PyUnicode_FromFormat("<cell at %p: %.80s object at %p>",
-                               op, Py_TYPE(op->ob_ref)->tp_name,
-                               op->ob_ref);
+        return PyUnicode_FromFormat("<cell at 0x1234: %.80s object at 0x1234>",
+                                Py_TYPE(op->ob_ref)->tp_name);
 }
 
 static int
diff --git a/Objects/classobject.c b/Objects/classobject.c
index 12dc276f289..e6141fd1a6a 100644
--- a/Objects/classobject.c
+++ b/Objects/classobject.c
@@ -488,8 +488,8 @@ instancemethod_repr(PyObject *self)
         Py_SETREF(funcname, NULL);
     }
 
-    result = PyUnicode_FromFormat("<instancemethod %V at %p>",
-                                  funcname, defname, self);
+    result = PyUnicode_FromFormat("<instancemethod %V at 0x1234>",
+                                  funcname, defname);
 
     Py_XDECREF(funcname);
     return result;
diff --git a/Objects/codeobject.c b/Objects/codeobject.c
index 6f7b8b54dcf..72deb386176 100644
--- a/Objects/codeobject.c
+++ b/Objects/codeobject.c
@@ -1757,12 +1757,12 @@ code_repr(PyCodeObject *co)
         lineno = -1;
     if (co->co_filename && PyUnicode_Check(co->co_filename)) {
         return PyUnicode_FromFormat(
-            "<code object %U at %p, file \"%U\", line %d>",
-            co->co_name, co, co->co_filename, lineno);
+            "<code object %U at 0x1234, file \"%U\", line %d>",
+            co->co_name, co->co_filename, lineno);
     } else {
         return PyUnicode_FromFormat(
-            "<code object %U at %p, file ???, line %d>",
-            co->co_name, co, lineno);
+            "<code object %U at 0x1234, file ???, line %d>",
+            co->co_name, lineno);
     }
 }
 
diff --git a/Objects/descrobject.c b/Objects/descrobject.c
index a6c90e7ac13..4eed82e8c5d 100644
--- a/Objects/descrobject.c
+++ b/Objects/descrobject.c
@@ -1334,10 +1334,9 @@ wrapper_hash(wrapperobject *wp)
 static PyObject *
 wrapper_repr(wrapperobject *wp)
 {
-    return PyUnicode_FromFormat("<method-wrapper '%s' of %s object at %p>",
+    return PyUnicode_FromFormat("<method-wrapper '%s' of %s object at 0x1234>",
                                wp->descr->d_base->name,
-                               Py_TYPE(wp->self)->tp_name,
-                               wp->self);
+                               Py_TYPE(wp->self)->tp_name);
 }
 
 static PyObject *
diff --git a/Objects/fileobject.c b/Objects/fileobject.c
index e99e155f2b8..130e5ea4beb 100644
--- a/Objects/fileobject.c
+++ b/Objects/fileobject.c
@@ -363,8 +363,8 @@ stdprinter_fileno(PyStdPrinter_Object *self, PyObject *Py_UNUSED(ignored))
 static PyObject *
 stdprinter_repr(PyStdPrinter_Object *self)
 {
-    return PyUnicode_FromFormat("<stdprinter(fd=%d) object at %p>",
-                                self->fd, self);
+        return PyUnicode_FromFormat("<stdprinter(fd=%d) object at 0x1234>",
+                               self->fd);
 }
 
 static PyObject *
diff --git a/Objects/frameobject.c b/Objects/frameobject.c
index 44f2726f2cc..c29eb4969a3 100644
--- a/Objects/frameobject.c
+++ b/Objects/frameobject.c
@@ -991,8 +991,8 @@ frame_repr(PyFrameObject *f)
     int lineno = PyFrame_GetLineNumber(f);
     PyCodeObject *code = f->f_frame->f_code;
     return PyUnicode_FromFormat(
-        "<frame at %p, file %R, line %d, code %S>",
-        f, code->co_filename, lineno, code->co_name);
+        "<frame at 0x1234, file %R, line %d, code %S>",
+        code->co_filename, lineno, code->co_name);
 }
 
 static PyMethodDef frame_methods[] = {
diff --git a/Objects/funcobject.c b/Objects/funcobject.c
index f43e3a2787b..d4a6b9dbdc8 100644
--- a/Objects/funcobject.c
+++ b/Objects/funcobject.c
@@ -862,8 +862,8 @@ func_dealloc(PyFunctionObject *op)
 static PyObject*
 func_repr(PyFunctionObject *op)
 {
-    return PyUnicode_FromFormat("<function %U at %p>",
-                                op->func_qualname, op);
+    return PyUnicode_FromFormat("<function %U at 0x1234>",
+                                op->func_qualname);
 }
 
 static int
diff --git a/Objects/genobject.c b/Objects/genobject.c
index 640a7d906c8..8535fc1e8e6 100644
--- a/Objects/genobject.c
+++ b/Objects/genobject.c
@@ -664,8 +664,8 @@ _PyGen_FetchStopIterationValue(PyObject **pvalue)
 static PyObject *
 gen_repr(PyGenObject *gen)
 {
-    return PyUnicode_FromFormat("<generator object %S at %p>",
-                                gen->gi_qualname, gen);
+        return PyUnicode_FromFormat("<generator object %S at 0x1234>",
+                               gen->gi_qualname);
 }
 
 static PyObject *
@@ -1057,8 +1057,8 @@ _PyCoro_GetAwaitableIter(PyObject *o)
 static PyObject *
 coro_repr(PyCoroObject *coro)
 {
-    return PyUnicode_FromFormat("<coroutine object %S at %p>",
-                                coro->cr_qualname, coro);
+        return PyUnicode_FromFormat("<coroutine object %S at 0x1234>",
+                               coro->cr_qualname);
 }
 
 static PyObject *
@@ -1419,8 +1419,8 @@ async_gen_traverse(PyAsyncGenObject *gen, visitproc visit, void *arg)
 static PyObject *
 async_gen_repr(PyAsyncGenObject *o)
 {
-    return PyUnicode_FromFormat("<async_generator object %S at %p>",
-                                o->ag_qualname, o);
+    return PyUnicode_FromFormat("<async_generator object %S at 0x1234>",
+                                o->ag_qualname);
 }
 
 
diff --git a/Objects/memoryobject.c b/Objects/memoryobject.c
index 9a5f9c665b2..fe5965afe96 100644
--- a/Objects/memoryobject.c
+++ b/Objects/memoryobject.c
@@ -2345,9 +2345,9 @@ static PyObject *
 memory_repr(PyMemoryViewObject *self)
 {
     if (self->flags & _Py_MEMORYVIEW_RELEASED)
-        return PyUnicode_FromFormat("<released memory at %p>", self);
+        return PyUnicode_FromFormat("<released memory at 0x1234>");
     else
-        return PyUnicode_FromFormat("<memory at %p>", self);
+        return PyUnicode_FromFormat("<memory at 0x1234>");
 }
 
 
diff --git a/Objects/methodobject.c b/Objects/methodobject.c
index 51752dec3dd..13998e37706 100644
--- a/Objects/methodobject.c
+++ b/Objects/methodobject.c
@@ -282,10 +282,9 @@ meth_repr(PyCFunctionObject *m)
     if (m->m_self == NULL || PyModule_Check(m->m_self))
         return PyUnicode_FromFormat("<built-in function %s>",
                                    m->m_ml->ml_name);
-    return PyUnicode_FromFormat("<built-in method %s of %s object at %p>",
+    return PyUnicode_FromFormat("<built-in method %s of %s object at 0x1234>",
                                m->m_ml->ml_name,
-                               Py_TYPE(m->m_self)->tp_name,
-                               m->m_self);
+                               Py_TYPE(m->m_self)->tp_name);
 }
 
 static PyObject *
diff --git a/Objects/object.c b/Objects/object.c
index 706719116da..b0aa4c0b431 100644
--- a/Objects/object.c
+++ b/Objects/object.c
@@ -428,7 +428,7 @@ PyObject_Print(PyObject *op, FILE *fp, int flags)
     else {
         if (Py_REFCNT(op) <= 0) {
             Py_BEGIN_ALLOW_THREADS
-            fprintf(fp, "<refcnt %zd at %p>", Py_REFCNT(op), (void *)op);
+            fprintf(fp, "<refcnt %zd at 0x1234>", Py_REFCNT(op));
             Py_END_ALLOW_THREADS
         }
         else {
@@ -505,18 +505,18 @@ _PyObject_Dump(PyObject* op)
     if (_PyObject_IsFreed(op)) {
         /* It seems like the object memory has been freed:
            don't access it to prevent a segmentation fault. */
-        fprintf(stderr, "<object at %p is freed>\n", op);
+        fprintf(stderr, "<object at 0x1234 is freed>\n");
         fflush(stderr);
         return;
     }
 
     /* first, write fields which are the least likely to crash */
-    fprintf(stderr, "object address  : %p\n", (void *)op);
+    fprintf(stderr, "object address  : 0x1234\n");
     fprintf(stderr, "object refcount : %zd\n", Py_REFCNT(op));
     fflush(stderr);
 
     PyTypeObject *type = Py_TYPE(op);
-    fprintf(stderr, "object type     : %p\n", type);
+    fprintf(stderr, "object type     : 0x1234\n");
     fprintf(stderr, "object type name: %s\n",
             type==NULL ? "NULL" : type->tp_name);
 
@@ -552,8 +552,8 @@ PyObject_Repr(PyObject *v)
     if (v == NULL)
         return PyUnicode_FromString("<NULL>");
     if (Py_TYPE(v)->tp_repr == NULL)
-        return PyUnicode_FromFormat("<%s object at %p>",
-                                    Py_TYPE(v)->tp_name, v);
+        return PyUnicode_FromFormat("<%s object at 0x1234>",
+                                    Py_TYPE(v)->tp_name);
 
     PyThreadState *tstate = _PyThreadState_GET();
 #ifdef Py_DEBUG
@@ -2278,7 +2278,7 @@ _Py_PrintReferences(PyInterpreterState *interp, FILE *fp)
     fprintf(fp, "Remaining objects:\n");
     PyObject *refchain = REFCHAIN(interp);
     for (op = refchain->_ob_next; op != refchain; op = op->_ob_next) {
-        fprintf(fp, "%p [%zd] ", (void *)op, Py_REFCNT(op));
+        fprintf(fp, "0x1234 [%zd] ", Py_REFCNT(op));
         if (PyObject_Print(op, fp, 0) != 0) {
             PyErr_Clear();
         }
@@ -2300,7 +2300,7 @@ _Py_PrintReferenceAddresses(PyInterpreterState *interp, FILE *fp)
     PyObject *refchain = REFCHAIN(interp);
     fprintf(fp, "Remaining object addresses:\n");
     for (op = refchain->_ob_next; op != refchain; op = op->_ob_next)
-        fprintf(fp, "%p [%zd] %s\n", (void *)op,
+        fprintf(fp, "0x1234 [%zd] %s\n",
             Py_REFCNT(op), Py_TYPE(op)->tp_name);
 }
 
@@ -2595,7 +2595,7 @@ _PyObject_AssertFailed(PyObject *obj, const char *expr, const char *msg,
     if (_PyObject_IsFreed(obj)) {
         /* It seems like the object memory has been freed:
            don't access it to prevent a segmentation fault. */
-        fprintf(stderr, "<object at %p is freed>\n", obj);
+        fprintf(stderr, "<object at 0x1234 is freed>\n");
         fflush(stderr);
     }
     else {
diff --git a/Objects/typeobject.c b/Objects/typeobject.c
index b0c79d34e65..e16b7c1f6ca 100644
--- a/Objects/typeobject.c
+++ b/Objects/typeobject.c
@@ -1596,7 +1596,7 @@ type_repr(PyTypeObject *type)
     if (type->tp_name == NULL) {
         // type_repr() called before the type is fully initialized
         // by PyType_Ready().
-        return PyUnicode_FromFormat("<class at %p>", type);
+        return PyUnicode_FromFormat("<class at 0x1234>");
     }
 
     PyObject *mod, *name, *rtn;
@@ -5539,10 +5539,10 @@ object_repr(PyObject *self)
         return NULL;
     }
     if (mod != NULL && !_PyUnicode_Equal(mod, &_Py_ID(builtins)))
-        rtn = PyUnicode_FromFormat("<%U.%U object at %p>", mod, name, self);
+        rtn = PyUnicode_FromFormat("<%U.%U object at 0x1234>", mod, name);
     else
-        rtn = PyUnicode_FromFormat("<%s object at %p>",
-                                  type->tp_name, self);
+        rtn = PyUnicode_FromFormat("<%s object at 0x1234>",
+                                  type->tp_name);
     Py_XDECREF(mod);
     Py_DECREF(name);
     return rtn;
@@ -8722,8 +8722,8 @@ slot_tp_repr(PyObject *self)
         return res;
     }
     PyErr_Clear();
-    return PyUnicode_FromFormat("<%s object at %p>",
-                               Py_TYPE(self)->tp_name, self);
+    return PyUnicode_FromFormat("<%s object at 0x1234>",
+                               Py_TYPE(self)->tp_name);
 }
 
 SLOT0(slot_tp_str, __str__)
diff --git a/Objects/unicodeobject.c b/Objects/unicodeobject.c
index 5accbd6d1dd..4005d2620d2 100644
--- a/Objects/unicodeobject.c
+++ b/Objects/unicodeobject.c
@@ -2844,23 +2844,11 @@ unicode_fromformat_arg(_PyUnicodeWriter *writer,
 
     case 'p':
     {
-        char number[MAX_INTMAX_CHARS];
+        /* Skip the pointer argument */
+        (void) va_arg(*vargs, void*);
 
-        len = sprintf(number, "%p", va_arg(*vargs, void*));
-        assert(len >= 0);
-
-        /* %p is ill-defined:  ensure leading 0x. */
-        if (number[1] == 'X')
-            number[1] = 'x';
-        else if (number[1] != 'x') {
-            memmove(number + 2, number,
-                    strlen(number) + 1);
-            number[0] = '0';
-            number[1] = 'x';
-            len += 2;
-        }
-
-        if (_PyUnicodeWriter_WriteASCIIString(writer, number, len) < 0)
+        /* Always output 0x1234 instead of the actual pointer */
+        if (_PyUnicodeWriter_WriteASCIIString(writer, "0x1234", 6) < 0)
             return NULL;
         break;
     }
diff --git a/Objects/weakrefobject.c b/Objects/weakrefobject.c
index aee79fc1410..72be6124a69 100644
--- a/Objects/weakrefobject.c
+++ b/Objects/weakrefobject.c
@@ -166,24 +166,20 @@ weakref_repr(PyWeakReference *self)
     PyObject* obj = PyWeakref_GET_OBJECT(self);
 
     if (obj == Py_None) {
-        return PyUnicode_FromFormat("<weakref at %p; dead>", self);
+        return PyUnicode_FromFormat("<weakref at 0x1234; dead>");
     }
 
     Py_INCREF(obj);
     name = _PyObject_LookupSpecial(obj, &_Py_ID(__name__));
     if (name == NULL || !PyUnicode_Check(name)) {
         repr = PyUnicode_FromFormat(
-            "<weakref at %p; to '%s' at %p>",
-            self,
-            Py_TYPE(PyWeakref_GET_OBJECT(self))->tp_name,
-            obj);
+            "<weakref at 0x1234; to '%s' at 0x1234>",
+            Py_TYPE(PyWeakref_GET_OBJECT(self))->tp_name);
     }
     else {
         repr = PyUnicode_FromFormat(
-            "<weakref at %p; to '%s' at %p (%U)>",
-            self,
+            "<weakref at 0x1234; to '%s' at 0x1234 (%U)>",
             Py_TYPE(PyWeakref_GET_OBJECT(self))->tp_name,
-            obj,
             name);
     }
     Py_DECREF(obj);
@@ -475,10 +471,8 @@ static PyObject *
 proxy_repr(PyWeakReference *proxy)
 {
     return PyUnicode_FromFormat(
-        "<weakproxy at %p to %s at %p>",
-        proxy,
-        Py_TYPE(PyWeakref_GET_OBJECT(proxy))->tp_name,
-        PyWeakref_GET_OBJECT(proxy));
+        "<weakproxy at 0x1234 to %s at 0x1234>",
+        Py_TYPE(PyWeakref_GET_OBJECT(proxy))->tp_name);
 }
 
 
diff --git a/Python/ceval.c b/Python/ceval.c
index 3985b52649c..acb347b2014 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -116,8 +116,8 @@ dump_stack(_PyInterpreterFrame *frame, PyObject **stack_pointer)
         }
         if (PyObject_Print(*ptr, stdout, 0) != 0) {
             PyErr_Clear();
-            printf("<%s object at %p>",
-                   Py_TYPE(*ptr)->tp_name, (void *)(*ptr));
+            printf("<%s object at 0x1234>",
+                   Py_TYPE(*ptr)->tp_name);
         }
     }
     printf("]\n");
diff --git a/Python/context.c b/Python/context.c
index e5899219daa..3d2442ba477 100644
--- a/Python/context.c
+++ b/Python/context.c
@@ -937,7 +937,7 @@ contextvar_tp_repr(PyContextVar *self)
         Py_DECREF(def);
     }
 
-    PyObject *addr = PyUnicode_FromFormat(" at %p>", self);
+    PyObject *addr = PyUnicode_FromString(" at 0x1234>");
     if (addr == NULL) {
         goto error;
     }
@@ -1149,7 +1149,7 @@ token_tp_repr(PyContextToken *self)
     }
     Py_DECREF(var);
 
-    PyObject *addr = PyUnicode_FromFormat(" at %p>", self);
+    PyObject *addr = PyUnicode_FromString(" at 0x1234>");
     if (addr == NULL) {
         goto error;
     }
diff --git a/Python/hamt.c b/Python/hamt.c
index 8cb94641bef..2cc7ef09897 100644
--- a/Python/hamt.c
+++ b/Python/hamt.c
@@ -1180,7 +1180,7 @@ hamt_node_bitmap_dump(PyHamtNode_Bitmap *node,
     if (tmp2 == NULL) {
         goto error;
     }
-    if (_hamt_dump_format(writer, "bitmap=%S id=%p):\n", tmp2, node)) {
+    if (_hamt_dump_format(writer, "bitmap=%S id=0x1234):\n", tmp2)) {
         Py_DECREF(tmp2);
         goto error;
     }
@@ -1557,8 +1557,8 @@ hamt_node_collision_dump(PyHamtNode_Collision *node,
         goto error;
     }
 
-    if (_hamt_dump_format(writer, "CollisionNode(size=%zd id=%p):\n",
-                          Py_SIZE(node), node))
+    if (_hamt_dump_format(writer, "CollisionNode(size=%zd id=0x1234):\n",
+                          Py_SIZE(node)))
     {
         goto error;
     }
@@ -1933,7 +1933,7 @@ hamt_node_array_dump(PyHamtNode_Array *node,
         goto error;
     }
 
-    if (_hamt_dump_format(writer, "ArrayNode(id=%p):\n", node)) {
+    if (_hamt_dump_format(writer, "ArrayNode(id=0x1234):\n")) {
         goto error;
     }
 
