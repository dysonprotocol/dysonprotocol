// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	_ "cosmossdk.io/api/cosmos/bank/v1beta1"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Task_8_list)(nil)

type _Task_8_list struct {
	list *[]*anypb.Any
}

func (x *_Task_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Task_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Task_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	(*x.list)[i] = concreteValue
}

func (x *_Task_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Task_8_list) AppendMutable() protoreflect.Value {
	v := new(anypb.Any)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Task_8_list) NewElement() protoreflect.Value {
	v := new(anypb.Any)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Task_9_list)(nil)

type _Task_9_list struct {
	list *[]*anypb.Any
}

func (x *_Task_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Task_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Task_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	(*x.list)[i] = concreteValue
}

func (x *_Task_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Task_9_list) AppendMutable() protoreflect.Value {
	v := new(anypb.Any)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Task_9_list) NewElement() protoreflect.Value {
	v := new(anypb.Any)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Task                     protoreflect.MessageDescriptor
	fd_Task_task_id             protoreflect.FieldDescriptor
	fd_Task_creator             protoreflect.FieldDescriptor
	fd_Task_scheduled_timestamp protoreflect.FieldDescriptor
	fd_Task_expiry_timestamp    protoreflect.FieldDescriptor
	fd_Task_task_gas_limit      protoreflect.FieldDescriptor
	fd_Task_task_gas_price      protoreflect.FieldDescriptor
	fd_Task_task_gas_fee        protoreflect.FieldDescriptor
	fd_Task_msgs                protoreflect.FieldDescriptor
	fd_Task_msg_results         protoreflect.FieldDescriptor
	fd_Task_status              protoreflect.FieldDescriptor
	fd_Task_creation_time       protoreflect.FieldDescriptor
	fd_Task_error_log           protoreflect.FieldDescriptor
	fd_Task_task_gas_consumed   protoreflect.FieldDescriptor
	fd_Task_execution_timestamp protoreflect.FieldDescriptor
)

func init() {
	file_dysonprotocol_crontask_v1_crontask_proto_init()
	md_Task = File_dysonprotocol_crontask_v1_crontask_proto.Messages().ByName("Task")
	fd_Task_task_id = md_Task.Fields().ByName("task_id")
	fd_Task_creator = md_Task.Fields().ByName("creator")
	fd_Task_scheduled_timestamp = md_Task.Fields().ByName("scheduled_timestamp")
	fd_Task_expiry_timestamp = md_Task.Fields().ByName("expiry_timestamp")
	fd_Task_task_gas_limit = md_Task.Fields().ByName("task_gas_limit")
	fd_Task_task_gas_price = md_Task.Fields().ByName("task_gas_price")
	fd_Task_task_gas_fee = md_Task.Fields().ByName("task_gas_fee")
	fd_Task_msgs = md_Task.Fields().ByName("msgs")
	fd_Task_msg_results = md_Task.Fields().ByName("msg_results")
	fd_Task_status = md_Task.Fields().ByName("status")
	fd_Task_creation_time = md_Task.Fields().ByName("creation_time")
	fd_Task_error_log = md_Task.Fields().ByName("error_log")
	fd_Task_task_gas_consumed = md_Task.Fields().ByName("task_gas_consumed")
	fd_Task_execution_timestamp = md_Task.Fields().ByName("execution_timestamp")
}

var _ protoreflect.Message = (*fastReflection_Task)(nil)

type fastReflection_Task Task

func (x *Task) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Task)(x)
}

func (x *Task) slowProtoReflect() protoreflect.Message {
	mi := &file_dysonprotocol_crontask_v1_crontask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Task_messageType fastReflection_Task_messageType
var _ protoreflect.MessageType = fastReflection_Task_messageType{}

type fastReflection_Task_messageType struct{}

func (x fastReflection_Task_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Task)(nil)
}
func (x fastReflection_Task_messageType) New() protoreflect.Message {
	return new(fastReflection_Task)
}
func (x fastReflection_Task_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Task
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Task) Descriptor() protoreflect.MessageDescriptor {
	return md_Task
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Task) Type() protoreflect.MessageType {
	return _fastReflection_Task_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Task) New() protoreflect.Message {
	return new(fastReflection_Task)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Task) Interface() protoreflect.ProtoMessage {
	return (*Task)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Task) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TaskId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TaskId)
		if !f(fd_Task_task_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Task_creator, value) {
			return
		}
	}
	if x.ScheduledTimestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.ScheduledTimestamp)
		if !f(fd_Task_scheduled_timestamp, value) {
			return
		}
	}
	if x.ExpiryTimestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.ExpiryTimestamp)
		if !f(fd_Task_expiry_timestamp, value) {
			return
		}
	}
	if x.TaskGasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TaskGasLimit)
		if !f(fd_Task_task_gas_limit, value) {
			return
		}
	}
	if x.TaskGasPrice != nil {
		value := protoreflect.ValueOfMessage(x.TaskGasPrice.ProtoReflect())
		if !f(fd_Task_task_gas_price, value) {
			return
		}
	}
	if x.TaskGasFee != nil {
		value := protoreflect.ValueOfMessage(x.TaskGasFee.ProtoReflect())
		if !f(fd_Task_task_gas_fee, value) {
			return
		}
	}
	if len(x.Msgs) != 0 {
		value := protoreflect.ValueOfList(&_Task_8_list{list: &x.Msgs})
		if !f(fd_Task_msgs, value) {
			return
		}
	}
	if len(x.MsgResults) != 0 {
		value := protoreflect.ValueOfList(&_Task_9_list{list: &x.MsgResults})
		if !f(fd_Task_msg_results, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_Task_status, value) {
			return
		}
	}
	if x.CreationTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreationTime)
		if !f(fd_Task_creation_time, value) {
			return
		}
	}
	if x.ErrorLog != "" {
		value := protoreflect.ValueOfString(x.ErrorLog)
		if !f(fd_Task_error_log, value) {
			return
		}
	}
	if x.TaskGasConsumed != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TaskGasConsumed)
		if !f(fd_Task_task_gas_consumed, value) {
			return
		}
	}
	if x.ExecutionTimestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.ExecutionTimestamp)
		if !f(fd_Task_execution_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Task) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Task.task_id":
		return x.TaskId != uint64(0)
	case "dysonprotocol.crontask.v1.Task.creator":
		return x.Creator != ""
	case "dysonprotocol.crontask.v1.Task.scheduled_timestamp":
		return x.ScheduledTimestamp != int64(0)
	case "dysonprotocol.crontask.v1.Task.expiry_timestamp":
		return x.ExpiryTimestamp != int64(0)
	case "dysonprotocol.crontask.v1.Task.task_gas_limit":
		return x.TaskGasLimit != uint64(0)
	case "dysonprotocol.crontask.v1.Task.task_gas_price":
		return x.TaskGasPrice != nil
	case "dysonprotocol.crontask.v1.Task.task_gas_fee":
		return x.TaskGasFee != nil
	case "dysonprotocol.crontask.v1.Task.msgs":
		return len(x.Msgs) != 0
	case "dysonprotocol.crontask.v1.Task.msg_results":
		return len(x.MsgResults) != 0
	case "dysonprotocol.crontask.v1.Task.status":
		return x.Status != ""
	case "dysonprotocol.crontask.v1.Task.creation_time":
		return x.CreationTime != int64(0)
	case "dysonprotocol.crontask.v1.Task.error_log":
		return x.ErrorLog != ""
	case "dysonprotocol.crontask.v1.Task.task_gas_consumed":
		return x.TaskGasConsumed != uint64(0)
	case "dysonprotocol.crontask.v1.Task.execution_timestamp":
		return x.ExecutionTimestamp != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Task"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Task does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Task.task_id":
		x.TaskId = uint64(0)
	case "dysonprotocol.crontask.v1.Task.creator":
		x.Creator = ""
	case "dysonprotocol.crontask.v1.Task.scheduled_timestamp":
		x.ScheduledTimestamp = int64(0)
	case "dysonprotocol.crontask.v1.Task.expiry_timestamp":
		x.ExpiryTimestamp = int64(0)
	case "dysonprotocol.crontask.v1.Task.task_gas_limit":
		x.TaskGasLimit = uint64(0)
	case "dysonprotocol.crontask.v1.Task.task_gas_price":
		x.TaskGasPrice = nil
	case "dysonprotocol.crontask.v1.Task.task_gas_fee":
		x.TaskGasFee = nil
	case "dysonprotocol.crontask.v1.Task.msgs":
		x.Msgs = nil
	case "dysonprotocol.crontask.v1.Task.msg_results":
		x.MsgResults = nil
	case "dysonprotocol.crontask.v1.Task.status":
		x.Status = ""
	case "dysonprotocol.crontask.v1.Task.creation_time":
		x.CreationTime = int64(0)
	case "dysonprotocol.crontask.v1.Task.error_log":
		x.ErrorLog = ""
	case "dysonprotocol.crontask.v1.Task.task_gas_consumed":
		x.TaskGasConsumed = uint64(0)
	case "dysonprotocol.crontask.v1.Task.execution_timestamp":
		x.ExecutionTimestamp = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Task"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Task does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Task) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dysonprotocol.crontask.v1.Task.task_id":
		value := x.TaskId
		return protoreflect.ValueOfUint64(value)
	case "dysonprotocol.crontask.v1.Task.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "dysonprotocol.crontask.v1.Task.scheduled_timestamp":
		value := x.ScheduledTimestamp
		return protoreflect.ValueOfInt64(value)
	case "dysonprotocol.crontask.v1.Task.expiry_timestamp":
		value := x.ExpiryTimestamp
		return protoreflect.ValueOfInt64(value)
	case "dysonprotocol.crontask.v1.Task.task_gas_limit":
		value := x.TaskGasLimit
		return protoreflect.ValueOfUint64(value)
	case "dysonprotocol.crontask.v1.Task.task_gas_price":
		value := x.TaskGasPrice
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "dysonprotocol.crontask.v1.Task.task_gas_fee":
		value := x.TaskGasFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "dysonprotocol.crontask.v1.Task.msgs":
		if len(x.Msgs) == 0 {
			return protoreflect.ValueOfList(&_Task_8_list{})
		}
		listValue := &_Task_8_list{list: &x.Msgs}
		return protoreflect.ValueOfList(listValue)
	case "dysonprotocol.crontask.v1.Task.msg_results":
		if len(x.MsgResults) == 0 {
			return protoreflect.ValueOfList(&_Task_9_list{})
		}
		listValue := &_Task_9_list{list: &x.MsgResults}
		return protoreflect.ValueOfList(listValue)
	case "dysonprotocol.crontask.v1.Task.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "dysonprotocol.crontask.v1.Task.creation_time":
		value := x.CreationTime
		return protoreflect.ValueOfInt64(value)
	case "dysonprotocol.crontask.v1.Task.error_log":
		value := x.ErrorLog
		return protoreflect.ValueOfString(value)
	case "dysonprotocol.crontask.v1.Task.task_gas_consumed":
		value := x.TaskGasConsumed
		return protoreflect.ValueOfUint64(value)
	case "dysonprotocol.crontask.v1.Task.execution_timestamp":
		value := x.ExecutionTimestamp
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Task"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Task does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Task.task_id":
		x.TaskId = value.Uint()
	case "dysonprotocol.crontask.v1.Task.creator":
		x.Creator = value.Interface().(string)
	case "dysonprotocol.crontask.v1.Task.scheduled_timestamp":
		x.ScheduledTimestamp = value.Int()
	case "dysonprotocol.crontask.v1.Task.expiry_timestamp":
		x.ExpiryTimestamp = value.Int()
	case "dysonprotocol.crontask.v1.Task.task_gas_limit":
		x.TaskGasLimit = value.Uint()
	case "dysonprotocol.crontask.v1.Task.task_gas_price":
		x.TaskGasPrice = value.Message().Interface().(*v1beta1.Coin)
	case "dysonprotocol.crontask.v1.Task.task_gas_fee":
		x.TaskGasFee = value.Message().Interface().(*v1beta1.Coin)
	case "dysonprotocol.crontask.v1.Task.msgs":
		lv := value.List()
		clv := lv.(*_Task_8_list)
		x.Msgs = *clv.list
	case "dysonprotocol.crontask.v1.Task.msg_results":
		lv := value.List()
		clv := lv.(*_Task_9_list)
		x.MsgResults = *clv.list
	case "dysonprotocol.crontask.v1.Task.status":
		x.Status = value.Interface().(string)
	case "dysonprotocol.crontask.v1.Task.creation_time":
		x.CreationTime = value.Int()
	case "dysonprotocol.crontask.v1.Task.error_log":
		x.ErrorLog = value.Interface().(string)
	case "dysonprotocol.crontask.v1.Task.task_gas_consumed":
		x.TaskGasConsumed = value.Uint()
	case "dysonprotocol.crontask.v1.Task.execution_timestamp":
		x.ExecutionTimestamp = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Task"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Task does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Task.task_gas_price":
		if x.TaskGasPrice == nil {
			x.TaskGasPrice = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.TaskGasPrice.ProtoReflect())
	case "dysonprotocol.crontask.v1.Task.task_gas_fee":
		if x.TaskGasFee == nil {
			x.TaskGasFee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.TaskGasFee.ProtoReflect())
	case "dysonprotocol.crontask.v1.Task.msgs":
		if x.Msgs == nil {
			x.Msgs = []*anypb.Any{}
		}
		value := &_Task_8_list{list: &x.Msgs}
		return protoreflect.ValueOfList(value)
	case "dysonprotocol.crontask.v1.Task.msg_results":
		if x.MsgResults == nil {
			x.MsgResults = []*anypb.Any{}
		}
		value := &_Task_9_list{list: &x.MsgResults}
		return protoreflect.ValueOfList(value)
	case "dysonprotocol.crontask.v1.Task.task_id":
		panic(fmt.Errorf("field task_id of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.creator":
		panic(fmt.Errorf("field creator of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.scheduled_timestamp":
		panic(fmt.Errorf("field scheduled_timestamp of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.expiry_timestamp":
		panic(fmt.Errorf("field expiry_timestamp of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.task_gas_limit":
		panic(fmt.Errorf("field task_gas_limit of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.status":
		panic(fmt.Errorf("field status of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.creation_time":
		panic(fmt.Errorf("field creation_time of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.error_log":
		panic(fmt.Errorf("field error_log of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.task_gas_consumed":
		panic(fmt.Errorf("field task_gas_consumed of message dysonprotocol.crontask.v1.Task is not mutable"))
	case "dysonprotocol.crontask.v1.Task.execution_timestamp":
		panic(fmt.Errorf("field execution_timestamp of message dysonprotocol.crontask.v1.Task is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Task"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Task does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Task) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Task.task_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "dysonprotocol.crontask.v1.Task.creator":
		return protoreflect.ValueOfString("")
	case "dysonprotocol.crontask.v1.Task.scheduled_timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "dysonprotocol.crontask.v1.Task.expiry_timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "dysonprotocol.crontask.v1.Task.task_gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "dysonprotocol.crontask.v1.Task.task_gas_price":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "dysonprotocol.crontask.v1.Task.task_gas_fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "dysonprotocol.crontask.v1.Task.msgs":
		list := []*anypb.Any{}
		return protoreflect.ValueOfList(&_Task_8_list{list: &list})
	case "dysonprotocol.crontask.v1.Task.msg_results":
		list := []*anypb.Any{}
		return protoreflect.ValueOfList(&_Task_9_list{list: &list})
	case "dysonprotocol.crontask.v1.Task.status":
		return protoreflect.ValueOfString("")
	case "dysonprotocol.crontask.v1.Task.creation_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "dysonprotocol.crontask.v1.Task.error_log":
		return protoreflect.ValueOfString("")
	case "dysonprotocol.crontask.v1.Task.task_gas_consumed":
		return protoreflect.ValueOfUint64(uint64(0))
	case "dysonprotocol.crontask.v1.Task.execution_timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Task"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Task does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Task) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dysonprotocol.crontask.v1.Task", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Task) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Task) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Task) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TaskId != 0 {
			n += 1 + runtime.Sov(uint64(x.TaskId))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ScheduledTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.ScheduledTimestamp))
		}
		if x.ExpiryTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.ExpiryTimestamp))
		}
		if x.TaskGasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.TaskGasLimit))
		}
		if x.TaskGasPrice != nil {
			l = options.Size(x.TaskGasPrice)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TaskGasFee != nil {
			l = options.Size(x.TaskGasFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Msgs) > 0 {
			for _, e := range x.Msgs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.MsgResults) > 0 {
			for _, e := range x.MsgResults {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreationTime != 0 {
			n += 1 + runtime.Sov(uint64(x.CreationTime))
		}
		l = len(x.ErrorLog)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TaskGasConsumed != 0 {
			n += 1 + runtime.Sov(uint64(x.TaskGasConsumed))
		}
		if x.ExecutionTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.ExecutionTimestamp))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ExecutionTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExecutionTimestamp))
			i--
			dAtA[i] = 0x70
		}
		if x.TaskGasConsumed != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TaskGasConsumed))
			i--
			dAtA[i] = 0x68
		}
		if len(x.ErrorLog) > 0 {
			i -= len(x.ErrorLog)
			copy(dAtA[i:], x.ErrorLog)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ErrorLog)))
			i--
			dAtA[i] = 0x62
		}
		if x.CreationTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreationTime))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.MsgResults) > 0 {
			for iNdEx := len(x.MsgResults) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MsgResults[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.Msgs) > 0 {
			for iNdEx := len(x.Msgs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Msgs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.TaskGasFee != nil {
			encoded, err := options.Marshal(x.TaskGasFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.TaskGasPrice != nil {
			encoded, err := options.Marshal(x.TaskGasPrice)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.TaskGasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TaskGasLimit))
			i--
			dAtA[i] = 0x28
		}
		if x.ExpiryTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExpiryTimestamp))
			i--
			dAtA[i] = 0x20
		}
		if x.ScheduledTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ScheduledTimestamp))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.TaskId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TaskId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Task: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
				}
				x.TaskId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TaskId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestamp", wireType)
				}
				x.ScheduledTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ScheduledTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
				}
				x.ExpiryTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExpiryTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskGasLimit", wireType)
				}
				x.TaskGasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TaskGasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskGasPrice", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TaskGasPrice == nil {
					x.TaskGasPrice = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TaskGasPrice); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskGasFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TaskGasFee == nil {
					x.TaskGasFee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TaskGasFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Msgs = append(x.Msgs, &anypb.Any{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Msgs[len(x.Msgs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MsgResults", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MsgResults = append(x.MsgResults, &anypb.Any{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MsgResults[len(x.MsgResults)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
				}
				x.CreationTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreationTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ErrorLog", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ErrorLog = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskGasConsumed", wireType)
				}
				x.TaskGasConsumed = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TaskGasConsumed |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutionTimestamp", wireType)
				}
				x.ExecutionTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExecutionTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Params                    protoreflect.MessageDescriptor
	fd_Params_block_gas_limit    protoreflect.FieldDescriptor
	fd_Params_expiry_limit       protoreflect.FieldDescriptor
	fd_Params_max_scheduled_time protoreflect.FieldDescriptor
)

func init() {
	file_dysonprotocol_crontask_v1_crontask_proto_init()
	md_Params = File_dysonprotocol_crontask_v1_crontask_proto.Messages().ByName("Params")
	fd_Params_block_gas_limit = md_Params.Fields().ByName("block_gas_limit")
	fd_Params_expiry_limit = md_Params.Fields().ByName("expiry_limit")
	fd_Params_max_scheduled_time = md_Params.Fields().ByName("max_scheduled_time")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_dysonprotocol_crontask_v1_crontask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockGasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockGasLimit)
		if !f(fd_Params_block_gas_limit, value) {
			return
		}
	}
	if x.ExpiryLimit != int64(0) {
		value := protoreflect.ValueOfInt64(x.ExpiryLimit)
		if !f(fd_Params_expiry_limit, value) {
			return
		}
	}
	if x.MaxScheduledTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaxScheduledTime)
		if !f(fd_Params_max_scheduled_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Params.block_gas_limit":
		return x.BlockGasLimit != uint64(0)
	case "dysonprotocol.crontask.v1.Params.expiry_limit":
		return x.ExpiryLimit != int64(0)
	case "dysonprotocol.crontask.v1.Params.max_scheduled_time":
		return x.MaxScheduledTime != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Params"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Params.block_gas_limit":
		x.BlockGasLimit = uint64(0)
	case "dysonprotocol.crontask.v1.Params.expiry_limit":
		x.ExpiryLimit = int64(0)
	case "dysonprotocol.crontask.v1.Params.max_scheduled_time":
		x.MaxScheduledTime = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Params"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "dysonprotocol.crontask.v1.Params.block_gas_limit":
		value := x.BlockGasLimit
		return protoreflect.ValueOfUint64(value)
	case "dysonprotocol.crontask.v1.Params.expiry_limit":
		value := x.ExpiryLimit
		return protoreflect.ValueOfInt64(value)
	case "dysonprotocol.crontask.v1.Params.max_scheduled_time":
		value := x.MaxScheduledTime
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Params"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Params.block_gas_limit":
		x.BlockGasLimit = value.Uint()
	case "dysonprotocol.crontask.v1.Params.expiry_limit":
		x.ExpiryLimit = value.Int()
	case "dysonprotocol.crontask.v1.Params.max_scheduled_time":
		x.MaxScheduledTime = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Params"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Params.block_gas_limit":
		panic(fmt.Errorf("field block_gas_limit of message dysonprotocol.crontask.v1.Params is not mutable"))
	case "dysonprotocol.crontask.v1.Params.expiry_limit":
		panic(fmt.Errorf("field expiry_limit of message dysonprotocol.crontask.v1.Params is not mutable"))
	case "dysonprotocol.crontask.v1.Params.max_scheduled_time":
		panic(fmt.Errorf("field max_scheduled_time of message dysonprotocol.crontask.v1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Params"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "dysonprotocol.crontask.v1.Params.block_gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "dysonprotocol.crontask.v1.Params.expiry_limit":
		return protoreflect.ValueOfInt64(int64(0))
	case "dysonprotocol.crontask.v1.Params.max_scheduled_time":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: dysonprotocol.crontask.v1.Params"))
		}
		panic(fmt.Errorf("message dysonprotocol.crontask.v1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in dysonprotocol.crontask.v1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockGasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockGasLimit))
		}
		if x.ExpiryLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.ExpiryLimit))
		}
		if x.MaxScheduledTime != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxScheduledTime))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxScheduledTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxScheduledTime))
			i--
			dAtA[i] = 0x18
		}
		if x.ExpiryLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExpiryLimit))
			i--
			dAtA[i] = 0x10
		}
		if x.BlockGasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockGasLimit))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockGasLimit", wireType)
				}
				x.BlockGasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockGasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpiryLimit", wireType)
				}
				x.ExpiryLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExpiryLimit |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxScheduledTime", wireType)
				}
				x.MaxScheduledTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxScheduledTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: dysonprotocol/crontask/v1/crontask.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Task represents a scheduled task in the crontask system
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the task
	TaskId uint64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Address of the creator of the task
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Unix timestamp when the task is scheduled to execute
	ScheduledTimestamp int64 `protobuf:"varint,3,opt,name=scheduled_timestamp,json=scheduledTimestamp,proto3" json:"scheduled_timestamp,omitempty"`
	// Unix timestamp after which the task will expire if not executed
	ExpiryTimestamp int64 `protobuf:"varint,4,opt,name=expiry_timestamp,json=expiryTimestamp,proto3" json:"expiry_timestamp,omitempty"`
	// Maximum gas limit for the task execution
	TaskGasLimit uint64 `protobuf:"varint,5,opt,name=task_gas_limit,json=taskGasLimit,proto3" json:"task_gas_limit,omitempty"`
	// Gas price for the task execution which is calculated automatically
	// from task_gas_fee / task_gas_limit
	TaskGasPrice *v1beta1.Coin `protobuf:"bytes,6,opt,name=task_gas_price,json=taskGasPrice,proto3" json:"task_gas_price,omitempty"`
	// Gas fee for the task execution
	TaskGasFee *v1beta1.Coin `protobuf:"bytes,7,opt,name=task_gas_fee,json=taskGasFee,proto3" json:"task_gas_fee,omitempty"`
	// Messages to execute as part of the task
	Msgs []*anypb.Any `protobuf:"bytes,8,rep,name=msgs,proto3" json:"msgs,omitempty"`
	// Results of message execution
	MsgResults []*anypb.Any `protobuf:"bytes,9,rep,name=msg_results,json=msgResults,proto3" json:"msg_results,omitempty"`
	// Current status of the task: Scheduled, Pending, Done, Failed, Expired
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Block timestamp when the task was created
	CreationTime int64 `protobuf:"varint,11,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Error message if task execution failed
	ErrorLog string `protobuf:"bytes,12,opt,name=error_log,json=errorLog,proto3" json:"error_log,omitempty"`
	// Actual gas consumed during task execution
	TaskGasConsumed uint64 `protobuf:"varint,13,opt,name=task_gas_consumed,json=taskGasConsumed,proto3" json:"task_gas_consumed,omitempty"`
	// Block timestamp when the task was executed (only for DONE / FAILED)
	ExecutionTimestamp int64 `protobuf:"varint,14,opt,name=execution_timestamp,json=executionTimestamp,proto3" json:"execution_timestamp,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dysonprotocol_crontask_v1_crontask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_dysonprotocol_crontask_v1_crontask_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Task) GetScheduledTimestamp() int64 {
	if x != nil {
		return x.ScheduledTimestamp
	}
	return 0
}

func (x *Task) GetExpiryTimestamp() int64 {
	if x != nil {
		return x.ExpiryTimestamp
	}
	return 0
}

func (x *Task) GetTaskGasLimit() uint64 {
	if x != nil {
		return x.TaskGasLimit
	}
	return 0
}

func (x *Task) GetTaskGasPrice() *v1beta1.Coin {
	if x != nil {
		return x.TaskGasPrice
	}
	return nil
}

func (x *Task) GetTaskGasFee() *v1beta1.Coin {
	if x != nil {
		return x.TaskGasFee
	}
	return nil
}

func (x *Task) GetMsgs() []*anypb.Any {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *Task) GetMsgResults() []*anypb.Any {
	if x != nil {
		return x.MsgResults
	}
	return nil
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *Task) GetErrorLog() string {
	if x != nil {
		return x.ErrorLog
	}
	return ""
}

func (x *Task) GetTaskGasConsumed() uint64 {
	if x != nil {
		return x.TaskGasConsumed
	}
	return 0
}

func (x *Task) GetExecutionTimestamp() int64 {
	if x != nil {
		return x.ExecutionTimestamp
	}
	return 0
}

// Params defines the parameters for the crontask module
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum gas allowed for executing tasks per block
	BlockGasLimit uint64 `protobuf:"varint,1,opt,name=block_gas_limit,json=blockGasLimit,proto3" json:"block_gas_limit,omitempty"`
	// Default expiry limit in seconds (24 hours)
	ExpiryLimit int64 `protobuf:"varint,2,opt,name=expiry_limit,json=expiryLimit,proto3" json:"expiry_limit,omitempty"`
	// Maximum allowed scheduled time in seconds from task creation (24 hours)
	MaxScheduledTime int64 `protobuf:"varint,3,opt,name=max_scheduled_time,json=maxScheduledTime,proto3" json:"max_scheduled_time,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dysonprotocol_crontask_v1_crontask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_dysonprotocol_crontask_v1_crontask_proto_rawDescGZIP(), []int{1}
}

func (x *Params) GetBlockGasLimit() uint64 {
	if x != nil {
		return x.BlockGasLimit
	}
	return 0
}

func (x *Params) GetExpiryLimit() int64 {
	if x != nil {
		return x.ExpiryLimit
	}
	return 0
}

func (x *Params) GetMaxScheduledTime() int64 {
	if x != nil {
		return x.MaxScheduledTime
	}
	return 0
}

var File_dysonprotocol_crontask_v1_crontask_proto protoreflect.FileDescriptor

var file_dysonprotocol_crontask_v1_crontask_proto_rawDesc = []byte{
	0x0a, 0x28, 0x64, 0x79, 0x73, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64, 0x79, 0x73, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62,
	0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d,
	0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x05,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x73, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6d,
	0x73, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a,
	0x6d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x81, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x61, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x24, 0x5a, 0x22, 0x64, 0x79, 0x73, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x2f, 0x63, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_dysonprotocol_crontask_v1_crontask_proto_rawDescOnce sync.Once
	file_dysonprotocol_crontask_v1_crontask_proto_rawDescData = file_dysonprotocol_crontask_v1_crontask_proto_rawDesc
)

func file_dysonprotocol_crontask_v1_crontask_proto_rawDescGZIP() []byte {
	file_dysonprotocol_crontask_v1_crontask_proto_rawDescOnce.Do(func() {
		file_dysonprotocol_crontask_v1_crontask_proto_rawDescData = protoimpl.X.CompressGZIP(file_dysonprotocol_crontask_v1_crontask_proto_rawDescData)
	})
	return file_dysonprotocol_crontask_v1_crontask_proto_rawDescData
}

var file_dysonprotocol_crontask_v1_crontask_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dysonprotocol_crontask_v1_crontask_proto_goTypes = []interface{}{
	(*Task)(nil),         // 0: dysonprotocol.crontask.v1.Task
	(*Params)(nil),       // 1: dysonprotocol.crontask.v1.Params
	(*v1beta1.Coin)(nil), // 2: cosmos.base.v1beta1.Coin
	(*anypb.Any)(nil),    // 3: google.protobuf.Any
}
var file_dysonprotocol_crontask_v1_crontask_proto_depIdxs = []int32{
	2, // 0: dysonprotocol.crontask.v1.Task.task_gas_price:type_name -> cosmos.base.v1beta1.Coin
	2, // 1: dysonprotocol.crontask.v1.Task.task_gas_fee:type_name -> cosmos.base.v1beta1.Coin
	3, // 2: dysonprotocol.crontask.v1.Task.msgs:type_name -> google.protobuf.Any
	3, // 3: dysonprotocol.crontask.v1.Task.msg_results:type_name -> google.protobuf.Any
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_dysonprotocol_crontask_v1_crontask_proto_init() }
func file_dysonprotocol_crontask_v1_crontask_proto_init() {
	if File_dysonprotocol_crontask_v1_crontask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dysonprotocol_crontask_v1_crontask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dysonprotocol_crontask_v1_crontask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dysonprotocol_crontask_v1_crontask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dysonprotocol_crontask_v1_crontask_proto_goTypes,
		DependencyIndexes: file_dysonprotocol_crontask_v1_crontask_proto_depIdxs,
		MessageInfos:      file_dysonprotocol_crontask_v1_crontask_proto_msgTypes,
	}.Build()
	File_dysonprotocol_crontask_v1_crontask_proto = out.File
	file_dysonprotocol_crontask_v1_crontask_proto_rawDesc = nil
	file_dysonprotocol_crontask_v1_crontask_proto_goTypes = nil
	file_dysonprotocol_crontask_v1_crontask_proto_depIdxs = nil
}
