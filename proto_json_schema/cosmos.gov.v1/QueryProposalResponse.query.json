{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/QueryProposalResponse",
    "definitions": {
        "QueryProposalResponse": {
            "properties": {
                "proposal": {
                    "$ref": "#/definitions/cosmos.gov.v1.Proposal",
                    "additionalProperties": true,
                    "description": "proposal is the requested governance proposal."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Query Proposal Response",
            "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
        },
        "cosmos.base.v1beta1.Coin": {
            "properties": {
                "denom": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Coin",
            "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.gov.v1.Proposal": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "id defines the unique id of the proposal."
                },
                "messages": {
                    "items": {
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "binary",
                                "binaryEncoding": "base64"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Any",
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++.     Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(\u0026foo)) {       ...     } Example 2: Pack and unpack a message in Java.     Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }     // or ...     if (any.isSameTypeAs(Foo.getDefaultInstance())) {       foo = any.unpack(Foo.getDefaultInstance());     }  Example 3: Pack and unpack a message in Python.     foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go      foo := \u0026pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := \u0026pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:     package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }     {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": \u003cstring\u003e,       \"lastName\": \u003cstring\u003e     } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):     {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }"
                    },
                    "type": "array",
                    "description": "messages are the arbitrary messages to be executed if the proposal passes."
                },
                "status": {
                    "enum": [
                        "PROPOSAL_STATUS_UNSPECIFIED",
                        0,
                        "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                        1,
                        "PROPOSAL_STATUS_VOTING_PERIOD",
                        2,
                        "PROPOSAL_STATUS_PASSED",
                        3,
                        "PROPOSAL_STATUS_REJECTED",
                        4,
                        "PROPOSAL_STATUS_FAILED",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Proposal Status",
                    "description": "ProposalStatus enumerates the valid statuses of a proposal."
                },
                "final_tally_result": {
                    "$ref": "#/definitions/cosmos.gov.v1.TallyResult",
                    "additionalProperties": true,
                    "description": "final_tally_result is the final tally result of the proposal. When querying a proposal via gRPC, this field is not populated until the proposal's voting period has ended."
                },
                "submit_time": {
                    "type": "string",
                    "description": "submit_time is the time of proposal submission.",
                    "format": "date-time"
                },
                "deposit_end_time": {
                    "type": "string",
                    "description": "deposit_end_time is the end time for deposition.",
                    "format": "date-time"
                },
                "total_deposit": {
                    "items": {
                        "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
                    },
                    "type": "array",
                    "description": "total_deposit is the total deposit on the proposal."
                },
                "voting_start_time": {
                    "type": "string",
                    "description": "voting_start_time is the starting time to vote on a proposal.",
                    "format": "date-time"
                },
                "voting_end_time": {
                    "type": "string",
                    "description": "voting_end_time is the end time of voting on a proposal.",
                    "format": "date-time"
                },
                "metadata": {
                    "type": "string",
                    "description": "metadata is any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3"
                },
                "title": {
                    "type": "string",
                    "description": "title is the title of the proposal"
                },
                "summary": {
                    "type": "string",
                    "description": "summary is a short summary of the proposal"
                },
                "proposer": {
                    "type": "string",
                    "description": "proposer is the address of the proposal sumbitter"
                },
                "expedited": {
                    "type": "boolean",
                    "description": "expedited defines if the proposal is expedited"
                },
                "failed_reason": {
                    "type": "string",
                    "description": "failed_reason defines the reason why the proposal failed"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Proposal",
            "description": "Proposal defines the core field members of a governance proposal."
        },
        "cosmos.gov.v1.TallyResult": {
            "properties": {
                "yes_count": {
                    "type": "string",
                    "description": "yes_count is the number of yes votes on a proposal."
                },
                "abstain_count": {
                    "type": "string",
                    "description": "abstain_count is the number of abstain votes on a proposal."
                },
                "no_count": {
                    "type": "string",
                    "description": "no_count is the number of no votes on a proposal."
                },
                "no_with_veto_count": {
                    "type": "string",
                    "description": "no_with_veto_count is the number of no with veto votes on a proposal."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Tally Result",
            "description": "TallyResult defines a standard tally for a governance proposal."
        }
    }
}